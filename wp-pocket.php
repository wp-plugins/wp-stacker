<?php
/*
	Plugin Name: WP Pocket
	Plugin URI: http://www.wp-pocket.com/
	Description: WP Pocket is a Wordpress plugin, with which you can post interessting links from Pocket automaticly on your blog - with autogenerated titles, discriptions and tags.
	Author: Jan Karres
	Author URI: http://www.jankarres.de/
	Version: 1.0.2
*/

if(!class_exists('wppocketer')) {
	class wppocketer {
		private $wpdb;
		private $version;
		
		// Pocket default API-Key by developer
		private $global_pocket_api_key;
	
		function __construct() {
			global $wpdb;
			
			// Set database
			$this->wpdb = $wpdb;
			
			// Set plugin version
			$this->version = '1.0.2';
		
			// Check WP version
			add_action('init', array(&$this, 'requires_wordpress_version'));
		
			// Change plugin status hooks
			register_activation_hook(__FILE__, array(&$this, 'activate'));
			register_deactivation_hook(__FILE__, array(&$this, 'deactivate'));
			
			// Hook a main page
			add_action('admin_menu', array(&$this, 'main_link'));
			
			// Hook an option page
			add_action('admin_menu', array(&$this, 'options_link'));
			
			// Add javascripts of the plugin in the system
			wp_register_script('wppocket_main', plugins_url('js/main.js', __FILE__), array('jquery', 'jquery-ui-core', 'jquery-ui-draggable', 'jquery-ui-droppable'));
			
			// Pocket default API-Key by developer
			$this->global_pocket_api_key = '074A0c78dTi1bI26f2pU4b0X9dTbe798';
		}
		
		function requires_wordpress_version() {
			global $wp_version;
			
			include_once(ABSPATH . 'wp-admin/includes/plugin.php'); 
			$plugin = plugin_basename(__FILE__);
			
			// Check WP version
			if (version_compare($wp_version, '3.4', '<')) {
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Pocket</i> requires WordPress 3.4 or higher. The plugin has been deactivated! Please update WordPress and try again.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
			
			// Check if cURL is available
			if (!function_exists('curl_init')){
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Pocket</i> requires cURL. The plugin has been deactivated! Please activate it or ask your webhoster to activate it.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
		}

		function activate() {
			// Check if version under 1.0.2, if true, replace Pocket username, password and api-key
			$version = explode('.', get_option('wppocket_version'));
			if (
				($version[0] == 1 && $version[1] == 0 && $version[2] < 2) ||
				($version[0] == '' && $version[1] == '' && $version[2] == '')
			) {
				// Update Pocket username, password and api-key
				update_option('wppocket_pocket_username', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_username'), true)));
				update_option('wppocket_pocket_password', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_password'), true)));
				update_option('wppocket_pocket_api_key', $this->xcrypt(0, $this->xcrypt(1, get_option('wppocket_pocket_api_key'), true)));
			}
			
			// Create database table for links
			$sql = '
			CREATE TABLE IF NOT EXISTS `' . $this->wpdb->prefix . 'wppocket_posted_links` (
				`id` int(255) NOT NULL AUTO_INCREMENT,
				`url` varchar(1000) NOT NULL,
				`timestamp` int(255) NOT NULL,
				PRIMARY KEY (`id`)
			) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
			';
			$this->wpdb->query($sql);
			
			// Create settings in database
			$sql = '
			INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
				`option_name` ,
				`option_value` ,
				`autoload`
			) VALUES
				("wppocket_version", "' . $this->version . '", "yes"),
				("wppocket_links_to_use", "0", "yes"),
				("wppocket_order", "0", "yes"),
				("wppocket_mark_as_readed", "0", "yes"),
				("wppocket_clean_url", "1", "yes"),
				("wppocket_meta_keyword_as_tags", "0", "yes"),
				("wppocket_reference_wppocket", "0", "yes"),
				("wppocket_ping_status", "open", "yes"),
				("wppocket_comment_status", "open", "yes"),
				("wppocket_post_status", "draft", "yes"),
				("wppocket_post_category", "1", "yes"),
				("wppocket_pocket_username", "", "yes"),
				("wppocket_pocket_password", "", "yes"),
				("wppocket_title", "WP Pocket link collection: %%month%% with %%count%% links", "yes"),
				("wppocket_introduction_text", "", "yes"),
				("wppocket_statements_text", "", "yes"),
				("wppocket_entry_building", "<strong>%%title%%</strong>[[: %%description%%]][[ - Tags: %%tags%%]] - %%url%%", "yes"),
				("wppocket_key_a", "' . $this->keygen(128) . '", "yes"),
				("wppocket_key_b", "' . $this->keygen(128) . '", "yes")
			';
			$this->wpdb->query($sql);
			
			$sql = '
			INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
				`option_name` ,
				`option_value` ,
				`autoload`
			) VALUES
				("wppocket_pocket_api_key_custom", "0", "yes"),
				("wppocket_pocket_api_key", "' . $this->xcrypt(0, $this->global_pocket_api_key) . '", "yes")
			';
			$this->wpdb->query($sql);
			
			// Check if plugin version number up to date
			if (get_option('wppocket_version') != $this->version) {
				// Update version number
				update_option('wppocket_version', $this->version);
			}
		}

		function deactivate() {
			// nothing to do, because user cam reactivate
		}
		
		// Gennerator for random keys for encrytion
		private function keygen($length) {
			/*
			 * Required parameters:
			 *		$length = length of the gennerated key
			 */
			 
			$characters = '0123456789qwertzuiopasdfghjklyxcvbnmQWERTZUIOPASDFGHJKLYXCVBNM';
			
			for ($i = 0; $i < $length; $i++) {
				$key .= $characters[mt_rand(0, strlen($characters) - 1)];
			}

			return $key;
		}
		
		// En- and decrypt strings
		private function xcrypt($mode, $string, $nosalt = false) {
			/*
			 * Required parameters:
			 *		$mode = encrypt (0), decrypt (1) 
			 *		$string = String, who shout en-/decrypt
			 */
			
			// Get crypt keys, if should
			if (!$nosalt) {
				$keys['a'] = get_option('wppocket_key_a');
				$key['b'] = get_option('wppocket_key_b');
			}
			
			if ($mode == 0) { // Encrypt
				return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), $string, MCRYPT_MODE_CBC, md5(md5($keys['b']))));
			}elseif ($mode == 1) { // Decrypt
				return rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($keys['b']))), "\0");
			}else { // False mode
				return false;
			}
		}
		
		private function cURL($url, $timeout = 5) {
			// Init cURL
			$cURL = curl_init();
			
			// Settings
			curl_setopt($cURL, CURLOPT_URL, $url);
			curl_setopt($cURL, CURLOPT_HEADER, 0);
			curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($cURL, CURLOPT_TIMEOUT, $timeout);
			
			// Download
			$output = curl_exec($cURL);
			
			// Close Connection
			curl_close($cURL);
			
			// Return
			return $output;
		}
		
		function cleanUpURL($url) {
			// Filter $_GET[p], falls vorhanden, aus link
			preg_match('/p=(.*)/', $url, $matches);
			$matches = explode('&', $matches[0]);
			
			// Clean url
			$url = explode('?', $url);
			$url = $url[0];
			
			// If $_GET[p] founded, add this
			if (count($matches) != 0 && $matches[0] != '') {
				$url = $url . '?' . $matches[0];
			}
			
			return $url;
		}
		
		function replaceEntryBuilding($title, $description, $url, $tags, $replace = true) {
			$wppocket_entry_building = get_option('wppocket_entry_building');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_entry_building = str_replace('%%title%%', $title, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%description%%', $description, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%url%%', $url, $wppocket_entry_building);
				$wppocket_entry_building = str_replace('%%tags%%', $tags, $wppocket_entry_building);
			}
			
			// Explode the entry building, by replace ]] throw [[ for find seperators
			$wppocket_entry_building = explode('[[', str_replace(']]','[[', $wppocket_entry_building));
			
			// Return the result Array
			return $wppocket_entry_building;
		}
		
		function getReplacedTitle($countLinks, $replace = true) {
			$wppocket_title = get_option('wppocket_title');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_title = str_replace('%%day%%', date('l'), $wppocket_title);
				$wppocket_title = str_replace('%%month%%', date('F'), $wppocket_title);
				$wppocket_title = str_replace('%%year%%', date('Y'), $wppocket_title);
				$wppocket_title = str_replace('%%count%%', $countLinks, $wppocket_title);
			}
			
			return trim($wppocket_title);
		}
		
		function getReplacedIntroductionText($replace = true) {
			$wppocket_introduction_text = get_option('wppocket_introduction_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_introduction_text = str_replace('%%day%%', date('l'), $wppocket_introduction_text);
				$wppocket_introduction_text = str_replace('%%month%%', date('F'), $wppocket_introduction_text);
				$wppocket_introduction_text = str_replace('%%year%%', date('Y'), $wppocket_introduction_text);			
			}
			
			return trim($wppocket_introduction_text);
		}
		
		function getReplacedStatementsText($replace = true) {
			$wppocket_statements_text = get_option('wppocket_statements_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wppocket_statements_text = str_replace('%%day%%', date('l'), $wppocket_statements_text);
				$wppocket_statements_text = str_replace('%%month%%', date('F'), $wppocket_statements_text);
				$wppocket_statements_text = str_replace('%%year%%', date('Y'), $wppocket_statements_text);			
			}
			
			return trim($wppocket_statements_text);
		}
		
		function checkPocketAccess() {
			// Check if username, password and api-key is set, if not, print error
			if (get_option('wppocket_pocket_username') == '' || get_option('wppocket_pocket_password') == '' || get_option('wppocket_pocket_api_key') == '') {
				?>
				<div id="message" class="error">
					<p><strong>WP Pocket can NOT work. Please save your Pocket username, password and API-Key (optional)!</strong></p>
				</div>
				<?php
				return false;
			}else { // Test the settings
				// Init cURL
				$getAuth = $this->cURL('https://readitlaterlist.com/v2/auth?username=' . $this->xcrypt(1, get_option('wppocket_pocket_username')) . '&password=' . $this->xcrypt(1, get_option('wppocket_pocket_password')) . '&apikey=' . $this->xcrypt(1, get_option('wppocket_pocket_api_key')));
				
				// Check if, user data ad api key correct
				if ($getAuth == '400 Bad Request') {
					?>
					<div id="message" class="error">
						<p><strong>Your API-Key it not valid. Please correct it, else WP Pocket can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}elseif ($getAuth == '401 Unauthorized') {
					?>
					<div id="message" class="error">
						<p><strong>Your Pocket username and/or password it not valid. Please correct that, else WP Pocket can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}else {
					return true;
				}
			}
		}
		
		function support_div($display = true) {
			?>
			<div class="support"<?php if (!$display) {  echo ' style="display: none;"'; } ?>>
				<h3>support me</h3>
				
				<p>If you use the plugin and like it, you can say thanks and support me.</p>
				
				<h3>follow me on twitter</h3>
				
				<p>
					<a href="https://twitter.com/jankarres" class="twitter-follow-button" data-show-count="false" data-lang="en" data-size="large">Follow @jankarres</a>
					<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
				</p>
				
				<h3>donate on flattr</h3>
				
				<a href="http://flattr.com/thing/881252/WP-Pocket" target="_blank">
					<img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" />
				</a>
			</div>
			<?php
		}
		
		function options_link() {
			// Start the view of the options page
			add_options_page('WP Pocket Settings', 'WP Pocket', 'manage_options', 'settings_pocket_poster', array($this, 'options_page_view'));
		}
		
		function options_page_view() {
			// Add option page style
			wp_enqueue_style('wppocket_options', plugins_url('css/options.css', __FILE__));
			wp_enqueue_style('wppocket_support', plugins_url('css/support.css', __FILE__));
			?>
			<div class="wrap wppocket_options">
				<?php
				// Start the Controller of the options page
				$this->options_page_controller();
				?>
			
				<div id="icon-options-general" class="icon32"><br></div>
				<h2>Einstellungen › WP Pocket</h2>
				
				<?php $this->support_div(); ?>
				
				<form method="post" action="<?php echo $_SERVER['REQUEST_URI']; ?>">
					<h3>Pocket Login</h3>
					<table class="form-table">
						<tr>
							<th>Pocket Username</th>
							<td>
								<input type="text" size="57" name="wppocket_pocket_username" value="<?php if (get_option('wppocket_pocket_username') != '') { echo $this->xcrypt(1, get_option('wppocket_pocket_username')); } ?>" />
							</td>
						</tr>
						<tr>
							<th>Pocket Password</th>
							<td>
								<input type="password" size="57" name="wppocket_pocket_password" value="" />
								<p class="description">If you do not wish to edit something, leave it blank.</p>
							</td>
						</tr>
						<tr>
							<th>Pocket API-Key</th>
							<td>
								<input type="text" size="57" name="wppocket_pocket_api_key" value="<?php if(get_option('wppocket_pocket_api_key_custom') == 1) { echo $this->xcrypt(1, get_option('wppocket_pocket_api_key')); } ?>" />
								
								<?php if(get_option('wppocket_pocket_api_key_custom') == 1) { ?>
									<label><input name="wppocket_pocket_api_key_custom_remove" type="checkbox" value="1" /> Use the default API-Key</label>
								<?php } ?>
								
								<p class="description">If you wish to use a private API-Key, please enter one. <strong>It is not necessary!</strong><br />
								You can get one on <a href="http://getpocket.com/api/signup/" target="_blank">http://getpocket.com/api/signup/</a>.</p>
							</td>
						</tr>
					</table>
					
					<h3>Data processing</h3>
					<table class="form-table">
						<tr>
							<th>Links to use</th>
							<td>
								<select name="wppocket_links_to_use">
									<option value="0" <?php selected('0', get_option('wppocket_links_to_use')); ?>>Only unread links, which are unposted</option>
									<option value="1" <?php selected('1', get_option('wppocket_links_to_use')); ?>>Only read links, which are unposted</option>
									<option value="2" <?php selected('2', get_option('wppocket_links_to_use')); ?>>All links, which are unposted</option>
									<option value="3" <?php selected('3', get_option('wppocket_links_to_use')); ?>>All unread links, also already posted ones</option>
									<option value="4" <?php selected('4', get_option('wppocket_links_to_use')); ?>>All read links, also already posted ones</option>
									<option value="5" <?php selected('5', get_option('wppocket_links_to_use')); ?>>All links, also already posted ones</option>
								</select>
								<p class="description">Which links should be used for the new post?</p>
							</td>
						</tr>
						<tr>
							<th>Order</th>
							<td>
								<select name="wppocket_order">
									<option value="0" <?php selected('0', get_option('wppocket_order')); ?>>Newest to oldest</option>
									<option value="1" <?php selected('1', get_option('wppocket_order')); ?>>Oldest to newest</option>
								</select>
								<p class="description">Which order should have the links in a new post?</p>
							</td>
						</tr>
						<tr>
							<th>Mark as readed</th>
							<td>
								<select name="wppocket_mark_as_readed">
									<option value="1" <?php selected('1', get_option('wppocket_mark_as_readed')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wppocket_mark_as_readed')); ?>>No</option>
								</select>
								<p class="description">Should the links be marked as read in Pocket, after post?</p>
							</td>
						</tr>
						<tr>
							<th>Clean up URL</th>
							<td>
								<select name="wppocket_clean_url">
									<option value="1" <?php selected('1', get_option('wppocket_clean_url')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wppocket_clean_url')); ?>>No</option>
								</select>
								<p class="description">If enabled, everything after the <i>?</i> in the url will be cut out. For example: 
								<i>http://example.de/title-of-post/?utm_source=feedreader</i> will be edited to <i>http://example.de/title-of-post/</i> -
								The <i>p</i> parameter, which is used by default worldpress, will not be cleared - 
								<strong>Sometimes necessary information will be lost!</strong></p>
							</td>
						</tr>
						<tr>
							<th>Use Meta Tag as Tags</th>
							<td>
								<select name="wppocket_meta_keyword_as_tags">
									<option value="1" <?php selected('1', get_option('wppocket_meta_keyword_as_tags')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wppocket_meta_keyword_as_tags')); ?>>No</option>
								</select>
								<p class="description">If there are no tags given, the meta tags will be used as tags.</p>
							</td>
						</tr>
						<tr>
							<th>WP Pocket reference</th>
							<td>
								<select name="wppocket_reference_wppocket">
									<option value="1" <?php selected('1', get_option('wppocket_reference_wppocket')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wppocket_reference_wppocket')); ?>>No</option>
								</select>
								<p class="description">Should there be a notification, that this post was generated by <i>WP Pocket</i>, at the end of the generated posts?</p>
							</td>
						</tr>
					</table>
					
					<h3>Post settings</h3>
					<table class="form-table">
						<tr>
							<th>Post status</th>
							<td>
								<select name="wppocket_post_status">
									<option value="publish" <?php selected('publish', get_option('wppocket_post_status')); ?>>Publish</option>
									<option value="pending" <?php selected('pending', get_option('wppocket_post_status')); ?>>Pending</option>
									<option value="draft" <?php selected('draft', get_option('wppocket_post_status')); ?>>Draft</option>
								</select>
								<p class="description">After generating the post, how should it be saved?</p>
							</td>
						</tr>
						<tr>
							<th>Post category</th>
							<td>
								<?php
								wp_dropdown_categories(array(
									'name' => 'wppocket_post_category',
									'hide_empty' => 0,
									'selected' => get_option('wppocket_post_category')
								));
								?>
								<p class="description">Which category should the post be saved in?</p>
							</td>
						</tr>
						<tr>
							<th>Commect status</th>
							<td>
								<select name="wppocket_comment_status">
									<option value="open" <?php selected('open', get_option('wppocket_comment_status')); ?>>Open</option>
									<option value="close" <?php selected('close', get_option('wppocket_comment_status')); ?>>Close</option>
								</select>
								<p class="description">Should the generated posts be commentable?</p>
							</td>
						</tr>
						<tr>
							<th>Ping status</th>
							<td>
								<select name="wppocket_ping_status">
									<option value="open" <?php selected('open', get_option('wppocket_ping_status')); ?>>Open</option>
									<option value="close" <?php selected('close', get_option('wppocket_ping_status')); ?>>Close</option>
								</select>
								<p class="description">Should the generated posts be pingable?</p>
							</td>
						</tr>
					</table>
					
					<h3>Post content matching</h3>
					<table class="form-table">
						<tr>
							<th>Title</th>
							<td>
								<input type="text" size="57" name="wppocket_title" value="<?php echo get_option('wppocket_title'); ?>" />
								<p class="description">
									This is the title of each post, which WP Pocket generates.<br />
									<strong>Use <i>%%day%%</i> for the day, on which the post is being generated; <i>%%month%%</i> for the month;
									<i>%%year%%</i> for the year; <i>%%count%%</i> to get the number of posted links.</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Entry building</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wppocket_entry_building',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wppocket_entry_building'), 'wppocket_entry_building', $args);
								?>
								<p class="description">
									Configure how a link should be shown. If you wish to show a part of the text only if a variable is not empty, 
									write the text and the variable in double square brackets. For example: %%title%%[[ - Tags: %%tags%%]]<br />
									<strong>Use <i>%%title%%</i> for title of the link in pocket; <i>%%description%%</i> for the meta description of the link; 
									<i>%%url%%</i> for the link itself; <i>%%tags%%</i> for added tags in pocket.</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Introduction text</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wppocket_introduction_text',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wppocket_introduction_text'), 'wppocket_introduction_text', $args);
								?>
								<p class="description">
									At the beginning of the post, before the links, this text will be shown.<br />
									<strong>Use <i>%%day%%</i> for day, on which the post is being generated; <i>%%month%%</i> for the month; <i>%%year%%</i> for the year.</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Statements text</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wppocket_statements_text',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wppocket_statements_text'), 'wppocket_statements_text', $args);
								?>
								<p class="description">
									At the end of the post, after the links, this text will be shown.<br />
									<strong>Use <i>%%day%%</i> for day, on which the post is being generated; <i>%%month%%</i> for the month; <i>%%year%%</i> for the year.</strong>
								</p>
							</td>
						</tr>
					</table>
					
					<input type="hidden" name="wppocket_edit" value="1" />
					
					<p class="submit">
						<input type="submit" class="button-primary" value="<?php _e('Save Changes') ?>" />
					</p>
				</form>
			</div>
			<?php
		}
		
		function options_page_controller() {
			// Check if setting sended
			if ($_POST['wppocket_edit']) {
				// Error Array
				$error = array();
				
				// Error Text Array
				$errorLang = array(
					'0' => 'Please enter your Pocket username.',
					'1' => 'Please enter your Pocket password.',
					'2' => 'Please enter your Pocket API-Key or reset it to use the default key.',
					'3' => 'Please enter a title for the posts.',
					'4' => 'Please enter a building for each link which will be posted.'
				);
			
				// Update "Pocket Login"
				
				// Check if Pocket username is isset
				if ($_POST['wppocket_pocket_username'] == '') {
					$error[] = 0;
				}else {
					update_option('wppocket_pocket_username', $this->xcrypt(0, $_POST['wppocket_pocket_username']));
				}
				
				// Check if Pocket one password is isset
				if (get_option('wppocket_pocket_password') == '' && $_POST['wppocket_pocket_password'] == '') {
					$error[] = 1;
				}elseif ($_POST['wppocket_pocket_password'] != '') {
					update_option('wppocket_pocket_password', $this->xcrypt(0, $_POST['wppocket_pocket_password']));
				}
				
				if ($_POST['wppocket_pocket_api_key_custom_remove'] == 1) {
					// Set default key
					update_option('wppocket_pocket_api_key_custom', 0);
					update_option('wppocket_pocket_api_key', $this->xcrypt(0, $this->global_pocket_api_key));
				}elseif(get_option('wppocket_pocket_api_key_custom') == 1 && $_POST['wppocket_pocket_api_key'] == '') {
					$error[] = 2;
				}elseif(get_option('wppocket_pocket_api_key_custom') == 1 && $_POST['wppocket_pocket_api_key'] != '') {
					// Set new key
					update_option('wppocket_pocket_api_key', $this->xcrypt(0, $_POST['wppocket_pocket_api_key']));
				}elseif (get_option('wppocket_pocket_api_key_custom') == 0 && $_POST['wppocket_pocket_api_key'] != '') {
					// Set custom API-Key first time
					update_option('wppocket_pocket_api_key_custom', 1);
					update_option('wppocket_pocket_api_key', $this->xcrypt(0, $_POST['wppocket_pocket_api_key']));
				}
				
				// Updates "Data processing"
				if ($_POST['wppocket_links_to_use'] < 0 && $_POST['wppocket_links_to_use'] > 5) {
					$_POST['wppocket_links_to_use'] = 0;
				}
				
				update_option('wppocket_links_to_use', $_POST['wppocket_links_to_use']);
				update_option('wppocket_order', $_POST['wppocket_order']);
				update_option('wppocket_mark_as_readed', $_POST['wppocket_mark_as_readed']);
				update_option('wppocket_clean_url', $_POST['wppocket_clean_url']);
				update_option('wppocket_meta_keyword_as_tags', $_POST['wppocket_meta_keyword_as_tags']);
				update_option('wppocket_reference_wppocket', $_POST['wppocket_reference_wppocket']);
				
				// Updates "Post settings"
				
				// Check if post status is valid, else check default
				if (
					$_POST['wppocket_post_status'] != 'publish' &&
					$_POST['wppocket_post_status'] != 'pending' &&
					$_POST['wppocket_post_status'] != 'draft'
				) {
					$_POST['wppocket_post_status'] = 'draft';
				}
				
				// Check if post category is valid, else check default
				if (
					$_POST['wppocket_post_category'] == '' ||
					$_POST['wppocket_post_category'] == 0
				) {
					$_POST['wppocket_post_category'] = 1;
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wppocket_comment_status'] != 'open' &&
					$_POST['wppocket_comment_status'] != 'close'
				) {
					$_POST['wppocket_comment_status'] = 'open';
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wppocket_ping_status'] != 'open' &&
					$_POST['wppocket_ping_status'] != 'close'
				) {
					$_POST['wppocket_ping_status'] = 'open';
				}
				
				update_option('wppocket_post_status', $_POST['wppocket_post_status']);
				update_option('wppocket_post_category', $_POST['wppocket_post_category']);
				update_option('wppocket_comment_status', $_POST['wppocket_comment_status']);
				update_option('wppocket_ping_status', $_POST['wppocket_ping_status']);
				
				// Update "Post content matching"
				
				// Check if title is not set
				if ($_POST['wppocket_title'] == '') {
					$error[] = 3;
				}else {
					update_option('wppocket_title', $_POST['wppocket_title']);
				}
				
				// Chech if entry building is not set
				if ($_POST['wppocket_entry_building'] == '') {
					$error[] = 4;
				}else {
					update_option('wppocket_entry_building', $_POST['wppocket_entry_building']);
				}
				
				// Updates without checks
				update_option('wppocket_introduction_text', $_POST['wppocket_introduction_text']);
				update_option('wppocket_statements_text', $_POST['wppocket_statements_text']);
				
				// Output all errors
				$i = 0;
				while ($i < count($error)) {
					?>
					<div id="message" class="error">
						<p><strong><?php echo $errorLang[$error[$i]]; ?></strong></p>
					</div>
					<?php
					$i++;
				}
				
				// Check if save without misstakes
				if (count($error) == 0) {
					?>
					<div id="message" class="updated">
						<p><strong><?php _e('Settings saved.') ?></strong></p>
					</div>
					<?php
				}
			}
			
			// Check Access
			$this->checkPocketAccess();
		}
		
		function main_link() {		
			// Start the view of the main page
			add_menu_page('WP Pocket', 'WP Pocket', 1, 'pocket_poster', array($this, 'main_page_view'), plugin_dir_url(__FILE__) . 'images/icons/16.png', 25);
		}
		
		function main_page_view() {
			// Add option page style
			wp_enqueue_style('wppocket_main', plugins_url('css/main.css', __FILE__));
			wp_enqueue_style('wppocket_support', plugins_url('css/support.css', __FILE__));

			// Add JavaScript functions
			wp_enqueue_script('jquery-ui-draggable');
			wp_enqueue_script('jquery-ui-droppable');
			wp_enqueue_script('nav-menu');
			wp_enqueue_script('postbox');
			wp_enqueue_script('wppocket_main');
			?>
			<div class="wrap wppocket">
				<div id="icon-wppocket" class="icon32"><br></div>
				<h2>WP Pocket</h2>
				
				<?php // Bullshot Snippet for fix navi-menu JavaScript ?>
				<div class="nav-tabs-nav">
					<div class="nav-tabs-arrow nav-tabs-arrow-left" style="display: none; "><a>«</a></div>
					<div class="nav-tabs-wrapper">
						<div class="nav-tabs" style="padding: 0px; margin-right: -110px; margin-left: 0px; ">
							<span class="nav-tab nav-tab-active"></span><a href="#" class="nav-tab menu-add-new"></a>	
						</div>
					</div>
				</div>
				
				<?php
				if ($_POST['mode'] != 'get') {
					$this->support_div();
				}
				?>
				
				<?php $this->main_page_controller(); ?>
				
				<?php
				// Check if should get Pocket elements or save as post
				if ($_POST['mode'] == 'get') { // Get Elements
					// Check Pocket Access
					$checkPocketAccess = $this->checkPocketAccess();
					
					// Check if access is valid
					if ($checkPocketAccess) {				
						// Get links from the user
						
						// Should get Readed, onreaded or all links?
						if (get_option('wppocket_links_to_use') == 0 || get_option('wppocket_links_to_use') == 3) { // Unreaded
							$state = '&state=unread';
						}elseif (get_option('wppocket_links_to_use') == 1 || get_option('wppocket_links_to_use') == 4) { // Readed
							$state = '&state=read';
						} // All
						
						$getLinks = $this->cURL('https://readitlaterlist.com/v2/get?username=' . $this->xcrypt(1, get_option('wppocket_pocket_username')) . '&password=' . $this->xcrypt(1, get_option('wppocket_pocket_password')) . '&apikey=' . $this->xcrypt(1, get_option('wppocket_pocket_api_key')) . $state . '&tags=1', 30);
						
						// Decode JSON to Object
						$getLinks = json_decode($getLinks);
						
						// Check if only not posted links should post
						if (get_option('wppocket_links_to_use') == 0 || get_option('wppocket_links_to_use') == 1 || get_option('wppocket_links_to_use') == 2) {
							// Remove all already posted links
							foreach ($getLinks->list as $key => $value) {
								// Check if aleady posted. If true, remove it
								$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wppocket_posted_links` WHERE `url`="' . $value->url . '"';
								$row = $this->wpdb->get_results($sql);
								
								if ($row[0]->id != '') {
									unset($getLinks->list->$key);
								}
							}
						}
						
						// Check if order should be oldest to newest
						if (get_option('wppocket_order')) {
							// Turn around the json object
							$tmp = json_encode($getLinks, true);
							$tmp = json_decode($tmp, true);
							$tmp['list'] = array_reverse($tmp['list']);
							$tmp = json_encode($tmp, true);
							$tmp = json_decode($tmp);
							$getLinks = $tmp;
						}
						
						if (count((array)$getLinks->list) == 0) { // No elements
							?>
							<?php $this->support_div(); ?>
							
							<p><strong>You do not have usable elements in your Pocket account! Is the <i>Links to use</i> setting correct?</strong></p>
							<p>You have to look for interesting links, before you can post them ;-)</p>
							<?php
						}else {
							?>
							<?php $this->support_div(false); ?>
							
							<p class="wppocket_loader" style="width: 308px; margin: 15px 0 0 0; text-align: center;">
								<img src="<?php echo plugins_url('images/loading.gif', __FILE__) ?>" alt="loading" /><br />
								<strong>Please wait while loading...</strong>
							</p>
							
							<form id="update-nav-menu" action="" method="post" enctype="multipart/form-data" style="display: none;">
								<p><br /><strong>Please edit, sort and associate the links. If you finished, please click on the <i>Generate post</i> button at the end of the list!</strong></p>
								
								<ul class="menu ui-sortable" id="menu-to-edit">
									<?php
									// Gennerate output of each link
									foreach ($getLinks->list as $key => $value) {								
										// Get description
										$urlHtml = $this->cURL($value->url);
										
										$doc = new DOMDocument();
										@$doc->loadHTML($urlHtml);
										
										if ($value->title == '') {
											$nodes = $doc->getElementsByTagName('title');
											$value->title = utf8_decode(utf8_encode($nodes->item(0)->nodeValue));
										}
										
										$metas = $doc->getElementsByTagName('meta');
										
										for ($i = 0; $i < $metas->length; $i++) {
											$meta = $metas->item($i);
											
											if($meta->getAttribute('name') == 'description') {
												$value->description = utf8_decode(utf8_encode($meta->getAttribute('content')));
											}
											
											if (get_option('wppocket_meta_keyword_as_tags') == 1) {
												if ($meta->getAttribute('name') == 'keywords') {
													$value->tags = utf8_decode(utf8_encode($meta->getAttribute('content')));
												}
											}
										}
										?>
										<li class="menu-item-edit-inactive">
											<dl class="menu-item-bar">
												<dt class="menu-item-handle">
													<div class="left">
														<?php echo $value->title; ?>
													</div>
													<div class="right">
														<a class="item-remove" href="#item-remove-<?php echo $key; ?>">Remove element</a>
														<a class="item-edit" href="#item-<?php echo $key; ?>">Edit element</a>
													</div>
												</dt>
											</dl>

											<div class="menu-item-settings" id="item-<?php echo $key; ?>">
												<p class="description description-thin">
													<label for="item-<?php echo $key; ?>-input-title">
														Title<br />
														<input type="text" id="item-<?php echo $key; ?>-input-title" class="widefat input-title" name="element[][title]" value="<?php echo $value->title; ?>" />
													</label>
												</p>
												<p class="description description-thin">
													<label for="item-<?php echo $key; ?>-input-tags">
														Tags (optional)<br />
														<input type="text" id="item-<?php echo $key; ?>-input-tags" class="widefat" name="element[][tags]" value="<?php echo $value->tags; ?>" />
													</label>
												</p>
												<p class="description">
													<label for="item-<?php echo $key; ?>-input-description">
														Description (optional)<br />
														<textarea name="element[][description]" rows="4" id="item-<?php echo $key; ?>-input-description" class="widefat" type="textarea"><?php echo $value->description; ?></textarea>
													</label>
												</p>
												<p class="description">
													<label for="item-<?php echo $key; ?>-input-url">
														URL<br />
														<input type="text" id="item-<?php echo $key; ?>-input-url" class="widefat" name="element[][url]" value="<?php if (get_option('wppocket_clean_url') == 1) { echo $this->cleanUpURL($value->url); }else { echo $value->url; } ?>" />
														<input type="hidden" id="item-<?php echo $key; ?>-input-url" class="widefat" name="element[][url_uncleaned]" value="<?php echo $value->url; ?>" />
													</label>
												</p>
												
												<input type="hidden" name="element[][id]" value="<?php echo $key; ?>" />
												<input type="hidden" name="element[][associate]" class="associate" value="0" />
											</div>
										</li>
									<?php } ?>
								</ul>
								
								<p class="submit">
									<input type="hidden" name="mode" value="save" />
									<input type="submit" name="save_menu" class="button-primary" value="Gennerate post" />
									<strong>This can take up to 30 seconds!</strong>
								</p>
							</form>
							<?php
						}
					}
				}elseif ($_POST['mode'] == 'save') { // Save post
					// Check if elements was posted
					if ($_POST['count_elements'] == 0) { // No elements
						?>
						<p><strong>No elements to post were found. Is the <i>Links to use</i> setting correct?</strong></strong></p>
						<p>You have to look for interesting links, before you can post them ;-)</p>
						<?php
					}else { // Success
						?>
						<p class="short"><strong>Great! You posted <?php echo $_POST['count_elements']; ?> links from your Pocket account into your blog. <?php if ($_POST['wppocket_mark_as_readed']) { ?>[18:56:01] Elias: They are now marked as read in your pocket account!<?php } ?></strong></p>
						<p class="short">If you like WP Pocket, I would be pleased, if you supported me. How to? Look in the yellow box on the right!</p>
						<?php
					}
				}else { // Print introduction
					?>
					<br /><br />
					<p class="short">You would like to generate a new post with links from you pocket account? Great!</p>

					<p class="short">After you click on <i>Get links</i> you will see all links which will be posted. If you would like to 
					associate to links, take the link which should be shown without title, description and tags in the second level and the main link.<br />
					You will be able to edit all titles, descriptions, links and tags or remove them. If you finished, you can generate the post.<?php if (get_option('wppocket_mark_as_readed') == 1) { ?> Only if you click on <i>Generate post</i>, the links will be marked as read in your Pocket account.<?php } ?></p>
					
					<?php
					// Check Pocket Access
					$checkPocketAccess = $this->checkPocketAccess();
					?>
					
					<form method="post" action="<?php echo $_SERVER['REQUEST_URI']; ?>">
						<p class="submit">
							<input type="hidden" name="mode" value="get" />
							<input type="submit" class="button-primary" value="Get links"<?php if($checkPocketAccess == false) { echo ' disabled'; } ?> />
							<strong>This can take up to 60 seconds!</strong>
						</p>
					</form>
					<?php
				}
				?>
			</div>
			<?php
		}
		
		function main_page_controller() {
			global $current_user;
			
			// Check if the post sould save
			if ($_POST['mode'] == 'save') { // Save post
				########################
				## SET ENTRY BUILDING ##
				########################
				
				// Set en empty example for entry building with replace
				$replaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false);
				
				// Set en empty example for entry building without replace
				$noReplaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false, false);
				
				// Check, which Array elements are dynamic. Set empy replace and flag in new array
				$i = 0;
				$exampleReplaceEntryBuilding = array();
				while($i < count($replaceEntryBuilding)) { 
					if ($replaceEntryBuilding[$i] == $noReplaceEntryBuilding[$i]) {
						$exampleReplaceEntryBuilding[$i] = array(
							'example' => $replaceEntryBuilding[$i],
							'dynamic' => false
						);
					}else {
						$exampleReplaceEntryBuilding[$i] = array(
							'example' => $replaceEntryBuilding[$i],
							'dynamic' => true
						);
					}
					
					$i++;
				}
				
				// Unset not longer needed vars
				unset($replaceEntryBuilding);
				unset($noReplaceEntryBuilding);
				
				#########################
				## SET ASSOCIATE LINKS ##
				#########################
				
				$i = 0;
				while ($i < (count($_POST['element']) / 7)) {
					// Check if this it not a associate link
					if (!$_POST['element'][($i * 7) + 5]['associate']) {
						// Search for associate links in the following
						$associateLinks = array();
						$i2 = 1;
						while(true) {
							// If this is an associate links, add this to the array, else break the while-loop
							if ($_POST['element'][$i + 5 + ($i2 * 7)]['associate']) {
								$_POST['element'][($i * 7) + 3][] = $_POST['element'][(($i * 7) + 3 + ($i2 * 7))]['url'];
								$_POST['element'][($i * 7) + 4][] = $_POST['element'][(($i * 7) + 4 + ($i2 * 7))]['url_uncleaned'];
							}else {
								break;
							}
							
							$i2++;
						}
					}
					
					$i++;
				}
				
				####################
				## GENNERATE POST ##
				####################
				
				// Set posted elements in $_POST for view
				$_POST['count_elements'] = round((count($_POST['element']) / 7));
				
				// Array for all posted links
				$allPostedLinks = array();
				
				$post_content = '';
				
				// Set introduction text if not empty
				if (trim(get_option('wppocket_introduction_text')) != '') {
					$post_content .= $this->getReplacedIntroductionText();
				}
				
				// Gennerate all links intro text
				$i = 0;
				while ($i < (count($_POST['element']) / 7)) {
					// Check if only not posted links should post
					if (get_option('wppocket_links_to_use') == 0 || get_option('wppocket_links_to_use') == 1 || get_option('wppocket_links_to_use') == 2) {
						// Check if aleady posted. If true, confine to the next loop
						$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wppocket_posted_links` WHERE `url`="' . $_POST['element'][($i * 7) + 3]['url'] . '"';
						$row = $this->wpdb->get_results($sql);
						
						if ($row[0]->id != '') {
							$_POST['count_elements'] -= count($_POST['element'][($i * 7) + 3]); // - this and associated elements
							$i++;
							continue;
						}
					}
					
					// Check if this it not a associate link
					if (!$_POST['element'][($i * 7) + 5]['associate']) {					
						// Gennerate url array in url string
						$url = '';
						
						$i2 = 0;
						foreach ($_POST['element'][($i * 7) + 3] as $value) {
							if ($i2 != 0) {
								$url .= '; ';
							}
							
							$url .= '<a href="' . $value . '" target="_blank">' . $value . '</a>';
							
							$i2++;
						}
						
						// Fill array for all posted links
						foreach ($_POST['element'][($i * 7) + 4] as $value) {
							$allPostedLinks[] = $value;
						}
						
						// Set element in entry building
						$element = $this->replaceEntryBuilding($_POST['element'][($i * 7)]['title'], $_POST['element'][($i * 7) + 2]['description'], $url, $_POST['element'][($i * 7) + 1]['tags']);
						
						// Check if a dynamic element is not in use an delete it
						$i2 = 0;
						while ($i2 < count($element)) {
							if ($element[$i2] == $exampleReplaceEntryBuilding[$i2]['example'] && $exampleReplaceEntryBuilding[$i2]['dynamic']) {
								unset($element[$i2]);
							}

							$i2++;
						}
						
						// Set element array as string for the post content
						$post_content .= '<p>';
						
						foreach ($element as $value) {
							$post_content .= $value;
						}
						
						$post_content .= '</p>';
					}
					
					$i++;
				}
				
				// Set statements text if not empty
				if (trim(get_option('wppocket_statements_text')) != '') {
					$post_content .= $this->getReplacedStatementsText();
				}
				
				// Chech if reference to WP Pocket shot print
				if (get_option('wppocket_reference_wppocket')) {
					$post_content .= '<p><i>This post was automatically created by WP Pocket. If you look for this WordPress plugin, check out <a href="http://wp-pocket.com/" target="_blank">WP-Pocket.com</a> now!</i></p>';
				}
				
				###############
				## SAVE POST ##
				###############
				
				// Save only, if one or more elements are valid
				if ($_POST['count_elements'] != 0) {
					// Set settings array
					$post = array(
						'comment_status' => get_option('wppocket_comment_status'),
						'ping_status' => get_option('wppocket_ping_status'),
						'post_author' => $current_user->ID,
						'post_category' => array(get_option('wppocket_post_category')),
						'post_content' => $post_content,
						'post_date' => date('Y-m-d H:i:s'),
						'post_date_gmt' => gmdate('Y-m-d H:i:s'),
						'post_status' => get_option('wppocket_post_status'),
						'post_title' => $this->getReplacedTitle($_POST['count_elements']),
						'post_type' => 'post'
					);
					
					// Insert the post
					wp_insert_post($post);
				}
				
				##########################
				## SAVE LINKS AS POSTED ##
				##########################
				
				// Save only, if one or more elements are valid
				if ($_POST['count_elements'] != 0) {
					// Set currently time
					$time = time();
					
					$i = 0;
					while ($i < count($allPostedLinks)) {
						$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wppocket_posted_links` WHERE `url`="' . $allPostedLinks[$i] . '"';
						$row = $this->wpdb->get_results($sql);
						
						// Save only it already not saved
						if ($row[0]->id == '') {
							$sql = '
							INSERT IGNORE INTO `' . $this->wpdb->prefix . 'wppocket_posted_links` (
								`url`,
								`timestamp`
							)
							VALUES
								(%s, %s)
							';
							
							// Save link as posted
							$this->wpdb->query(
								$this->wpdb->prepare(
									$sql,
									$allPostedLinks[$i],
									$time
								)
							);
						}
						
						$i++;
					}
				}
				
				#################################
				## SET STATUS READED IN POCKET ##
				#################################
				
				// Check if link should marke as readed
				if (get_option('wppocket_mark_as_readed')) {
					// JSON Start
					$markAsReaded = '{';
					
					// Fill JSON
					$i = 0;
					while ($i < count($allPostedLinks)) {
						if ($i != 0) {
							$markAsReaded .= ',';
						}
						
						$markAsReaded .= '"' . $i . '":{"url":"' . $allPostedLinks[$i] . '"}';
						
						$i++;
					}
					
					// JSON End
					$markAsReaded .= '}';
					
					// Send request
					$responses = $this->cURL('https://readitlaterlist.com/v2/send?username=' . $this->xcrypt(1, get_option('wppocket_pocket_username')) . '&password=' . $this->xcrypt(1, get_option('wppocket_pocket_password')) . '&apikey=' . $this->xcrypt(1, get_option('wppocket_pocket_api_key')) . '&read=' . urlencode($markAsReaded), 10);
				}
			}
		}
	}
}

// Init the plugin in wordpress
if(class_exists('wppocketer')) {
	$wppocketer = new wppocketer();
}

if(isset($wppocketer)) {
	add_action('init', array(&$wppocketer, 'activate'));
}
?>