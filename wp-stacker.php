<?php
/*
	Plugin Name: WP Stacker
	Plugin URI: http://wp-stacker.com/
	Description: WP Stacker is a Wordpress plugin, with which you can post interessting links from Pocket automaticly on your blog - with autogenerated titles, discriptions and tags.
	Author: Jan Karres
	Author URI: http://jankarres.de/
	Version: 1.8.3
*/

if(!class_exists('wpstacker')) {
	class wpstacker {
		private $wpdb;
		private $version;
		
		// Pocket default Consumer-Key by developer
		private $global_pocket_consumer_key;
	
		function __construct() {
			global $wpdb;

			// Set database
			$this->wpdb = $wpdb;
			
			// Set plugin version
			$this->version = '1.8.3';
		
			// Check WP version
			add_action('init', array(&$this, 'requires_versions'));
			
			// Change plugin status hooks
			register_activation_hook(__FILE__, array(&$this, 'activate'));
			register_deactivation_hook(__FILE__, array(&$this, 'deactivate'));
			
			// Hook a main page
			add_action('admin_menu', array(&$this, 'main_link'));
			
			// Hook an option page
			add_action('admin_menu', array(&$this, 'options_link'));
			
			// Add javascripts of the plugin in the system
			@wp_register_script('wpstacker_main', plugins_url('js/main.js', __FILE__), array('jquery', 'jquery-ui-core', 'jquery-ui-draggable', 'jquery-ui-droppable'));
			
			// Pocket default Consumer-Key by developer
			$this->global_pocket_consumer_key = '11766-5f768499f69f3e53575c6779';
		}
		
		// Check if requied versions are supported
		function requires_versions() {
			global $wp_version;
			
			include_once(ABSPATH . 'wp-admin/includes/plugin.php'); 
			$plugin = plugin_basename(__FILE__);
			
			// Check WP version
			if (version_compare($wp_version, '3.4', '<')) {
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Stacker</i> requires WordPress 3.4 or higher. The plugin has been deactivated! Please update WordPress and try again.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
			
			// Check if Mcrypt is available
			if (!function_exists('mcrypt_encrypt')){
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Stacker</i> requires Mcrypt PHP extension. The plugin has been deactivated! Please activate it or ask your webhoster to activate it.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
			
			// Check PHP Version
			if (!version_compare(PHP_VERSION, '5.2', '>=')) {
				deactivate_plugins($plugin);
				wp_die('<i>WP Stacker</i> requires PHP 5.2 or higher. The plugin has been deactivated! Please update your PHP and try again.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
			}
			
			// Check if cURL is available
			if (!function_exists('curl_init')){
				if(is_plugin_active($plugin)) {
					deactivate_plugins($plugin);
					wp_die('<i>WP Stacker</i> requires cURL. The plugin has been deactivated! Please activate it or ask your webhoster to activate it.<br /><br />Back to <a href="' . admin_url() . '">WordPress Dashboard</a>.');
				}
			}
		}

		function activate() {
			$currentVersion = get_option('wpstacker_version');
			
			// Check if plugin version number up to date
			if ($currentVersion != $this->version) {
				// Create database table for links
				$sql = '
				CREATE TABLE IF NOT EXISTS `' . $this->wpdb->prefix . 'wpstacker_posted_links` (
					`id` int(255) NOT NULL AUTO_INCREMENT,
					`url` varchar(1000) NOT NULL,
					`timestamp` int(255) NOT NULL,
					PRIMARY KEY (`id`)
				) ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;
				';
				$this->wpdb->query($sql);
			
				// Create settings in database
				$sql = '
				INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
					`option_name` ,
					`option_value` ,
					`autoload`
				) VALUES
					("wpstacker_version", "' . $this->version . '", "yes"),
					("wpstacker_links_to_use", "0", "yes"),
					("wpstacker_faved", "0", "yes"),
					("wpstacker_order", "0", "yes"),
					("wpstacker_mark_as_readed", "0", "yes"),
					("wpstacker_clean_url", "1", "yes"),
					("wpstacker_meta_keyword_as_tags", "0", "yes"),
					("wpstacker_reference_wpstacker", "0", "yes"),
					("wpstacker_ping_status", "open", "yes"),
					("wpstacker_comment_status", "open", "yes"),
					("wpstacker_post_status", "draft", "yes"),
					("wpstacker_post_format", "0", "yes"),
					("wpstacker_post_category", "1", "yes"),
					("wpstacker_pocket_username", "", "yes"),
					("wpstacker_pocket_access_key", "", "yes"),
					("wpstacker_title", "WP Stacker link collection: %%month%% with %%count%% links", "yes"),
					("wpstacker_introduction_text", "", "yes"),
					("wpstacker_statements_text", "", "yes"),
					("wpstacker_entry_building", "<strong>%%title%%</strong>[[: %%description%%]][[ - by %%author%%]][[ - Tags: %%tags%%]] - %%url%%", "yes"),
					("wpstacker_language", "en", "yes"),
					("wpstacker_statistics", "1", "yes"),
					("wpstacker_key_a", "' . $this->keygen(128) . '", "yes"),
					("wpstacker_key_b", "' . $this->keygen(128) . '", "yes")
				';
				$this->wpdb->query($sql);
			
				// Create Customer Key in database
				$sql = '
				INSERT IGNORE INTO `' . $this->wpdb->prefix . 'options` (
					`option_name` ,
					`option_value` ,
					`autoload`
				) VALUES
					("wpstacker_pocket_consumer_key_custom", "0", "yes"),
					("wpstacker_pocket_consumer_key", "' . $this->xcrypt(0, $this->global_pocket_consumer_key) . '", "yes")
				';
				$this->wpdb->query($sql);
				
				
				// Send statistics, if allowed
				if (get_option('wpstacker_statistics') == 1 && $currentVersion != '') {
					$this->statisticsUpdateVersion();
				}
				
				// Update version number
				update_option('wpstacker_version', $this->version);
			}
		}

		function deactivate() {
			// nothing to do, because user can reactivate the plugin
		}
		
		// Function to create a plugin_action_links
		function plugin_action_links($links, $file) {
			if ($file == 'wp-stacker/wp-stacker.php') {
				// create link
				array_unshift(
					$links,
					sprintf('<a href="options-general.php?page=%s">%s</a>', 'settings_pocket_poster', __('Settings'))
				);
			}
			
			return $links;
		}
		
		// Gennerator for random keys for encrytion
		private function keygen($length) {
			/*
			 * Required parameters:
			 *		$length = length of the gennerated key
			 */
			 
			$characters = '0123456789qwertzuiopasdfghjklyxcvbnmQWERTZUIOPASDFGHJKLYXCVBNM';
			$key = '';
			for ($i = 0; $i < $length; $i++) {
				$key .= $characters[mt_rand(0, strlen($characters) - 1)];
			}

			return $key;
		}
		
		// En- and decrypt strings
		private function xcrypt($mode, $string, $nosalt = false) {
			/*
			 * Required parameters:
			 *		$mode = encrypt (0), decrypt (1) 
			 *		$string = String, who shout en-/decrypt
			 */
			
			// Get crypt keys, if should
			$key = array();
			$keys = array();
			$key['a'] = '';
			$key['b'] = '';
			$keys['a'] = '';
			$keys['b'] = '';
			if (!$nosalt) {
				$keys['a'] = get_option('wpstacker_key_a');
				$key['b'] = get_option('wpstacker_key_b');
			}
			
			if ($mode == 0) { // Encrypt
				return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), $string, MCRYPT_MODE_CBC, md5(md5($keys['b']))));
			}elseif ($mode == 1) { // Decrypt
				return rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($keys['a']), base64_decode($string), MCRYPT_MODE_CBC, md5(md5($keys['b']))), "\0");
			}else { // False mode
				return false;
			}
		}
		
		// Easy cURL function
		private function cURL($url, $post, $timeout = 5) {
			// Init cURL
			$cURL = curl_init();
			
			// Define HTTP-Header
			$httpheader = array();
			$httpheader[] = 'Content-type: application/x-www-form-urlencoded;charset=UTF-8'; 
			
			// Settings
			curl_setopt($cURL, CURLOPT_URL, $url);
			curl_setopt($cURL, CURLOPT_HEADER, 0);
			curl_setopt($cURL, CURLOPT_HTTPHEADER, $httpheader);
			curl_setopt($cURL, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($cURL, CURLOPT_TIMEOUT, $timeout);
			curl_setopt($cURL, CURLOPT_SSL_VERIFYPEER, false);
			
			// Save POST parameter in one string
			if (count($post) != 0) {
				$postAsString = '';
				$i = 0;
				foreach ($post as $key => $value) {
					if ($i != 0) {
						$postAsString .= '&';
					}
				
					$postAsString .= $key . '=' . $value;
					
					$i++;
				}
			}
			
			// Set POST parameters
			curl_setopt($cURL, CURLOPT_POST, count($post));
			curl_setopt($cURL, CURLOPT_POSTFIELDS, $postAsString);
			
			// Download
			$output = curl_exec($cURL);
			
			// Close Connection
			curl_close($cURL);
			
			// Return
			return $output;
		}
		
		// Function to check if string in UTF-8 after W3C
		function is_utf8($string) {
			// From http://w3.org/International/questions/qa-forms-utf-8.html
			return preg_match('%^(?:
			[\x09\x0A\x0D\x20-\x7E]            # ASCII
			| [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
			|  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
			| [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
			|  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
			|  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
			| [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
			|  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
			)*$%xs', $string);
		}
		
		// Function to get Pocket user auth after OAuth 2.0
		function authPocketAccountGetRequest() {
			// Define current URL as return URL with GET parameter auth
			$returnUrl = (isset($_SERVER['HTTPS'])?'https':'http') . '://' . $_SERVER['HTTP_HOST'] . str_replace('auth-get', 'auth', $_SERVER['REQUEST_URI']);
			
			// Request authe
			$oAuthRequest = $this->cURL(
				'https://getpocket.com/v3/oauth/request',
				array(
					'consumer_key' => $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')),
					'redirect_uri' => $returnUrl
				)
			);
			
			// Split return, to have [1] the needed request token
			$oAuthRequestToken = explode('=', $oAuthRequest);
			
			// Redirect user to Pocket auth form (via meta, because wp hadalready sent header)
			echo '<meta http-equiv="refresh" content="0;url=' . 'https://getpocket.com/auth/authorize?request_token=' . urlencode($oAuthRequestToken[1]) . '&redirect_uri=' . urlencode($returnUrl . '&token=' . $oAuthRequestToken[1]) . '" />';
			exit;
		}
		
		// Function to save access token of a user
		function authPocketAccountSaveAccessToken() {
			// Define access token by GET
			$oAuthRequestToken = $_GET['token'];
			
			// Request authe
			$oAuthAccess = $this->cURL(
				'https://getpocket.com/v3/oauth/authorize',
				array(
					'consumer_key' => $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')),
					'code' => $oAuthRequestToken
				)
			);
			
			// Split return to have access token and username seperated ([0][1] = access_key; [1][1] = username)
			$oAuthAccess = explode('&', $oAuthAccess);
			$oAuthAccess[0] = explode('=', $oAuthAccess[0]);
			$oAuthAccess[1] = explode('=', $oAuthAccess[1]);
			
			// Check if access key and username are set
			if ($oAuthAccess[0][1] != '' && $oAuthAccess[1][1] != '') {
				// Save auth key and username
				update_option('wpstacker_pocket_access_key', $this->xcrypt(0, $oAuthAccess[0][1]));
				update_option('wpstacker_pocket_username', $this->xcrypt(0, $oAuthAccess[1][1]));
				
				// Redirect user to success page. Print not here, because if the user refresh, the auth would fail.
				echo '<meta http-equiv="refresh" content="0;url=' . 'options-general.php?page=settings_pocket_poster&auth-success" />';
				exit;
			}else {
				// Print, the auth faild
				echo '<div id="message" class="error">';
					echo '<p><strong>The authentication of your Pocket account failed. Please try again!</strong></p>';
				echo '</div>';
			}
		}
		
		// Function to clean links of unneeded shares
		function cleanUpURL($url) {
			// Filter $_GET[p], falls vorhanden, aus link
			preg_match('/p=(.*)/', $url, $matches);
			if (count($matches) != 0) {
				$matches = explode('&', $matches[0]);
			}	
			
			// Clean url
			$url = explode('?', $url);
			$url = $url[0];
			
			// If $_GET[p] founded, add this
			if (count($matches) != 0 && $matches[0] != '') {
				$url = $url . '?' . $matches[0];
			}
			
			return $url;
		}
		
		// Function to replace variables in the entry building
		function replaceEntryBuilding($title, $description, $url, $urlOnly, $tags, $author, $countwords, $replace = true) {
			$wpstacker_entry_building = get_option('wpstacker_entry_building');
			
			// Set the variables, if should do this
			if ($replace) {
				$wpstacker_entry_building = str_replace('%%title%%', $title, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%description%%', $description, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%url%%', $url, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%url_only%%', $urlOnly, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%tags%%', $tags, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%author%%', $author, $wpstacker_entry_building);
				$wpstacker_entry_building = str_replace('%%countwords%%', $countwords, $wpstacker_entry_building);
			}
			
			// Explode the entry building, by replace ]] throw [[ for find seperators
			$wpstacker_entry_building = explode('[[', str_replace(']]','[[', $wpstacker_entry_building));
			
			// Return the result Array
			return $wpstacker_entry_building;
		}
		
		// Function to replace variables in the title of the post
		function getReplacedTitle($countLinks, $replace = true) {
			$wpstacker_title = get_option('wpstacker_title');
			
			// Set the variables, if should do this
			if ($replace) {
				$wpstacker_title = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wpstacker_title);
				$wpstacker_title = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wpstacker_title);
				$wpstacker_title = str_replace('%%year%%', date('Y'), $wpstacker_title);
				$wpstacker_title = str_replace('%%count%%', $countLinks, $wpstacker_title);
				
				preg_match('/%%date::(.*)%%/', $wpstacker_title, $matches);
				if (count($matches) == 2) {
					$wpstacker_title = str_replace($matches[0], date($matches[1]), $wpstacker_title);
				}
			}
			
			return trim($wpstacker_title);
		}
		
		// Function to replace variables in the introduction text
		function getReplacedIntroductionText($countLinks, $replace = true) {
			$wpstacker_introduction_text = get_option('wpstacker_introduction_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wpstacker_introduction_text = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wpstacker_introduction_text);
				$wpstacker_introduction_text = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wpstacker_introduction_text);
				$wpstacker_introduction_text = str_replace('%%year%%', date('Y'), $wpstacker_introduction_text);			
				$wpstacker_introduction_text = str_replace('%%count%%', $countLinks, $wpstacker_introduction_text);
				
				preg_match('/%%date::(.*)%%/', $wpstacker_introduction_text, $matches);
				if (count($matches) == 2) {
					$wpstacker_introduction_text = str_replace($matches[0], date($matches[1]), $wpstacker_introduction_text);
				}
			}
			
			return trim($wpstacker_introduction_text);
		}
		
		// Function to replace variables in the statements text
		function getReplacedStatementsText($countLinks, $replace = true) {
			$wpstacker_statements_text = get_option('wpstacker_statements_text');
			
			// Set the variables, if should do this
			if ($replace) {
				$wpstacker_statements_text = str_replace('%%day%%', $this->getReplaceLanguageDependentStrings(date('l')), $wpstacker_statements_text);
				$wpstacker_statements_text = str_replace('%%month%%', $this->getReplaceLanguageDependentStrings(date('F')), $wpstacker_statements_text);
				$wpstacker_statements_text = str_replace('%%year%%', date('Y'), $wpstacker_statements_text);
				$wpstacker_statements_text = str_replace('%%count%%', $countLinks, $wpstacker_statements_text);
				
				preg_match('/%%date::(.*)%%/', $wpstacker_statements_text, $matches);
				if (count($matches) == 2) {
					$wpstacker_statements_text = str_replace($matches[0], date($matches[1]), $wpstacker_statements_text);
				}
			}
			
			return trim($wpstacker_statements_text);
		}
		
		// Function to replace language-dependent strings
		function getReplaceLanguageDependentStrings($string) {
			// Check with language is selected
			if (get_option('wpstacker_language') == 'de') { // German
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'Januar';
						break;
					case ('February'):
						return 'Februar';
						break;
					case ('March'):
						return 'März';
						break;
					case ('April'):
						return 'April';
						break;
					case ('May'):
						return 'Mai';
						break;
					case ('June'):
						return 'Juni';
						break;
					case ('July'):
						return 'July';
						break;
					case ('August'):
						return 'August';
						break;
					case ('September'):
						return 'Steptember';
						break;
					case ('October'):
						return 'Oktober';
						break;
					case ('November'):
						return 'November';
						break;
					case ('December'):
						return 'Dezember';
						break;
					
					case ('Monday'):
						return 'Montag';
						break;
					case ('Tuesday'):
						return 'Dienstag';
						break;
					case ('Wednesday'):
						return 'Mittwoch';
						break;
					case ('Thursday'):
						return 'Donnerstag';
						break;
					case ('Friday'):
						return 'Freitag';
						break;
					case ('Saturday'):
						return 'Samstag';
						break;
					case ('Sunday'):
						return 'Sonntag';
						break;
				}
			}else if (get_option('wpstacker_language') == 'fr') { // French
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'janvier';
						break;
					case ('February'):
						return 'février';
						break;
					case ('March'):
						return 'mars';
						break;
					case ('April'):
						return 'avril';
						break;
					case ('May'):
						return 'mai';
						break;
					case ('June'):
						return 'juin';
						break;
					case ('July'):
						return 'juillet';
						break;
					case ('August'):
						return 'août';
						break;
					case ('September'):
						return 'septembre';
						break;
					case ('October'):
						return 'octobre';
						break;
					case ('November'):
						return 'novembre';
						break;
					case ('December'):
						return 'décembre';
						break;
					
					case ('Monday'):
						return 'lundi';
						break;
					case ('Tuesday'):
						return 'mardi';
						break;
					case ('Wednesday'):
						return 'mercredi';
						break;
					case ('Thursday'):
						return 'jeudi';
						break;
					case ('Friday'):
						return 'vendredi';
						break;
					case ('Saturday'):
						return 'samedi';
						break;
					case ('Sunday'):
						return 'dimanche';
						break;
				}
			}else { // English by default
				// Return replaced strings
				switch($string) {
					case ('January'):
						return 'January';
						break;
					case ('February'):
						return 'February';
						break;
					case ('March'):
						return 'March';
						break;
					case ('April'):
						return 'April';
						break;
					case ('May'):
						return 'May';
						break;
					case ('June'):
						return 'June';
						break;
					case ('July'):
						return 'July';
						break;
					case ('August'):
						return 'August';
						break;
					case ('September'):
						return 'September';
						break;
					case ('October'):
						return 'October';
						break;
					case ('November'):
						return 'November';
						break;
					case ('December'):
						return 'December';
						break;
					
					case ('Monday'):
						return 'Monday';
						break;
					case ('Tuesday'):
						return 'Tuesday';
						break;
					case ('Wednesday'):
						return 'Wednesday';
						break;
					case ('Thursday'):
						return 'Thursday';
						break;
					case ('Friday'):
						return 'Friday';
						break;
					case ('Saturday'):
						return 'Saturday';
						break;
					case ('Sunday'):
						return 'Sunday';
						break;
				}
			}
		}
		
		// Function to check if the plugin have access to a Pocket account
		function checkPocketAccess() {
			// Check if username, password and  consumer-key is set, if not, print error
			if (get_option('wpstacker_pocket_username') == '' || get_option('wpstacker_pocket_access_key') == '' || get_option('wpstacker_pocket_consumer_key') == '') {
				?>
				<div id="message" class="error">
					<p><strong>WP Stacker can NOT work. Please authenticate your Pocket account in the WP Stacker options!</strong></p>
				</div>
				<?php
				return false;
			}else { // Test the settings
				// Init cURL
				$getAuth = $this->cURL(
					'https://getpocket.com/v3/send',
					array(
						'consumer_key' => $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')),
						'access_token' => $this->xcrypt(1, get_option('wpstacker_pocket_access_key')),
						'actions' => '[{}]'
					)
				);
				
				// Check if, user data and consumer-key correct
				if ($getAuth == '400 Bad Request') {
					?>
					<div id="message" class="error">
						<p><strong>Your Consumer-Key it not valid. Please correct it, else WP Stacker can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}elseif ($getAuth == '401 Unauthorized') {
					?>
					<div id="message" class="error">
						<p><strong>The authentication of you Pocket account is expired. Please reauthenticate it, else WP Stacker can NOT work.</strong></p>
					</div>
					<?php
					return false;
				}else {
					return true;
				}
			}
		}
		
		// Support box on the right side of each WP Stacker page
		function support_div($display = true) {
			?>
			<div class="support"<?php if (!$display) {  echo ' style="display: none;"'; } ?>>
				<h3>support me</h3>
				
				<p>If you use the plugin and like it, you can say thanks and support me.</p>
				
				<h3>follow me on twitter</h3>
				
				<p>
					<a href="https://twitter.com/jankarres" class="twitter-follow-button" data-show-count="false" data-size="large" data-dnt="true">Follow @jankarres</a>
					<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
				</p>
				
				<h3>report bugs</h3>
				
				<p>
					You found a bug? You have an idea for a feature? Then let me know and send a request on <a href="http://wp-stacker.com/" target="_blank">WP-Stacker.com</a>!
				</p>
				
				<h3>rate the plugin</h3>
				
				<p>
					You can rate the plugin in the <a href="http://wordpress.org/extend/plugins/wp-stacker/" target="_blank">WordPress Plugin Directory</a> and help some other people to know, if this plugin is nice!
				</p>
			</div>
			<?php
		}
		
		// Function to set options page
		function options_link() {
			// Start the view of the options page
			add_options_page('WP Stacker Settings', 'WP Stacker', 'edit_pages', 'settings_pocket_poster', array($this, 'options_page_view'));
			
			// Setzte Link
			add_filter('plugin_action_links', array($this, 'plugin_action_links'), 10, 2);
		}
		
		// Options page view
		function options_page_view() {
			// Add option page style
			wp_enqueue_style('wpstacker_options', plugins_url('css/options.css', __FILE__));
			wp_enqueue_style('wpstacker_support', plugins_url('css/support.css', __FILE__));
			?>
			<div class="wrap wpstacker_options">
				<?php
				// Start the Controller of the options page
				$this->options_page_controller();
				?>
			
				<div id="icon-options-general" class="icon32"><br></div>
				<h2>Einstellungen › WP Stacker</h2>
				
				<?php $this->support_div(); ?>
				
					<h3>Pocket Login</h3>
					<table class="form-table">
						<tr>
							<th>Pocket Auth</th>
							<td>
								<?php if (get_option('wpstacker_pocket_username') != '') { echo $this->xcrypt(1, get_option('wpstacker_pocket_username')) . ' authenticated.'; } ?> 
								<?php if (get_option('wpstacker_pocket_username') == '') { echo '<a href="?page=settings_pocket_poster&auth-get"><input type="button" class="button-primary" value="Authenticate account" /></a>'; }else  { echo '<a href="?page=settings_pocket_poster&auth-get"><input type="button" class="button-primary" value="Authenticate other account" /></a>'; } ?>
							</td>
						</tr>
						
						<form method="post" action="<?php echo $_SERVER['REQUEST_URI']; ?>">
						
						<tr>
							<th>Pocket Consumer-Key</th>
							<td>
								<input type="text" size="57" name="wpstacker_pocket_consumer_key" value="<?php if(get_option('wpstacker_pocket_consumer_key_custom') == 1) { echo $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')); } ?>" />
								
								<?php if(get_option('wpstacker_pocket_consumer_key_custom') == 1) { ?>
									<label><input name="wpstacker_pocket_consumer_key_custom_remove" type="checkbox" value="1" /> Use the default Consumer-Key</label>
								<?php } ?>
								
								<p class="description">If you wish to use a private Consumer-Key, please enter one. <strong>It is not necessary!</strong><br />
								You can get one on <a href="http://getpocket.com/developer/apps/new" target="_blank">http://getpocket.com/developer/apps/new</a>.</p>
							</td>
						</tr>
					</table>
					
					<h3>WP Stacker Settings</h3>
					<table class="form-table">
						<tr>
							<th>Language</th>
							<td>
								<select name="wpstacker_language">
									<option value="en" <?php selected('en', get_option('wpstacker_language')); ?>>English</option>
									<option value="de" <?php selected('de', get_option('wpstacker_language')); ?>>German</option>
									<option value="fr" <?php selected('fr', get_option('wpstacker_language')); ?>>French</option>
								</select>
								<p class="description">A few variables you can set are language-dependent. Which language should WP Stacker use? <strong>This setting does not change the language of complete WP Stacker (currently only English supported)!</strong></p>
							</td>
						</tr>
						<tr>
							<th>Statistics</th>
							<td>
								<select name="wpstacker_statistics">
									<option value="1" <?php selected('1', get_option('wpstacker_statistics')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wpstacker_statistics')); ?>>No</option>
								</select>
								<p class="description">Do you allow WP Stacker to collect anonymous statistics about published links and updates and send them to WP-Stacker.com? These statistics will only be used to improve WP Stacker.</p>
							</td>
						</tr>
					</table>
					
					<h3>Data processing</h3>
					<table class="form-table">
						<tr>
							<th>Links to use</th>
							<td>
								<select name="wpstacker_links_to_use">
									<option value="0" <?php selected('0', get_option('wpstacker_links_to_use')); ?>>Only unread links, which are unposted</option>
									<option value="1" <?php selected('1', get_option('wpstacker_links_to_use')); ?>>Only read/archived links, which are unposted</option>
									<option value="2" <?php selected('2', get_option('wpstacker_links_to_use')); ?>>All links, which are unposted</option>
									<option value="3" <?php selected('3', get_option('wpstacker_links_to_use')); ?>>All unread links, also already posted ones</option>
									<option value="4" <?php selected('4', get_option('wpstacker_links_to_use')); ?>>All read/archived links, also already posted ones</option>
									<option value="5" <?php selected('5', get_option('wpstacker_links_to_use')); ?>>All links, also already posted ones</option>
								</select>
								<p class="description">Which links should be used for the new post?</p>
							</td>
						</tr>
						<tr>
							<th>Favorites</th>
							<td>
								<select name="wpstacker_faved">
									<option value="0" <?php selected('0', get_option('wpstacker_faved')); ?>>All links</option>
									<option value="1" <?php selected('1', get_option('wpstacker_faved')); ?>>Only faved links</option>
									<option value="2" <?php selected('2', get_option('wpstacker_faved')); ?>>Only unfaved links</option>
								</select>
								<p class="description">Should only faved or unfaved links be used in a new post?</p>
							</td>
						</tr>
						<tr>
							<th>Order</th>
							<td>
								<select name="wpstacker_order">
									<option value="0" <?php selected('0', get_option('wpstacker_order')); ?>>Newest to oldest</option>
									<option value="1" <?php selected('1', get_option('wpstacker_order')); ?>>Oldest to newest</option>
								</select>
								<p class="description">Which order should have the links in a new post?</p>
							</td>
						</tr>
						<tr>
							<th>Mark as readed/archived</th>
							<td>
								<select name="wpstacker_mark_as_readed">
									<option value="1" <?php selected('1', get_option('wpstacker_mark_as_readed')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wpstacker_mark_as_readed')); ?>>No</option>
								</select>
								<p class="description">Should the links be marked as read in Pocket, after post?</p>
							</td>
						</tr>
						<tr>
							<th>Clean up URL</th>
							<td>
								<select name="wpstacker_clean_url">
									<option value="1" <?php selected('1', get_option('wpstacker_clean_url')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wpstacker_clean_url')); ?>>No</option>
								</select>
								<p class="description">If enabled, everything after the <i>?</i> in the url will be cut out. For example: 
								<i>http://example.com/title-of-post/?utm_source=feedreader</i> will be edited to <i>http://example.com/title-of-post/</i> -
								The <i>p</i> parameter, which is used by default worldpress, will not be cleared - 
								<strong>Sometimes necessary information will be lost!</strong></p>
							</td>
						</tr>
						<tr>
							<th>Use Meta Tag as Tags</th>
							<td>
								<select name="wpstacker_meta_keyword_as_tags">
									<option value="1" <?php selected('1', get_option('wpstacker_meta_keyword_as_tags')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wpstacker_meta_keyword_as_tags')); ?>>No</option>
								</select>
								<p class="description">If there are no tags given, the meta tags will be used as tags.</p>
							</td>
						</tr>
						<tr>
							<th>WP Stacker reference</th>
							<td>
								<select name="wpstacker_reference_wpstacker">
									<option value="1" <?php selected('1', get_option('wpstacker_reference_wpstacker')); ?>>Yes</option>
									<option value="0" <?php selected('0', get_option('wpstacker_reference_wpstacker')); ?>>No</option>
								</select>
								<p class="description">Should there be a notification, that this post was generated by <i>WP Stacker</i>, at the end of the generated posts?</p>
							</td>
						</tr>
					</table>
					
					<h3>Post settings</h3>
					<table class="form-table">
						<tr>
							<th>Post status</th>
							<td>
								<select name="wpstacker_post_status">
									<option value="publish" <?php selected('publish', get_option('wpstacker_post_status')); ?>>Publish</option>
									<option value="pending" <?php selected('pending', get_option('wpstacker_post_status')); ?>>Pending</option>
									<option value="draft" <?php selected('draft', get_option('wpstacker_post_status')); ?>>Draft</option>
								</select>
								<p class="description">After generating the post, how should it be saved?</p>
							</td>
						</tr>
						<tr>
							<th>Post format</th>
							<td>
								<select name="wpstacker_post_format">
									<option value="0" <?php selected('0', get_option('wpstacker_post_format')); ?>>Standard</option>
									<option value="aside" <?php selected('aside', get_option('wpstacker_post_format')); ?>>Aside</option>
									<option value="audio" <?php selected('audio', get_option('wpstacker_post_format')); ?>>Audio</option>
									<option value="chat" <?php selected('chat', get_option('wpstacker_post_format')); ?>>Chat</option>
									<option value="gallery" <?php selected('gallery', get_option('wpstacker_post_format')); ?>>Gallery</option>
									<option value="image" <?php selected('image', get_option('wpstacker_post_format')); ?>>Image</option>
									<option value="link" <?php selected('link', get_option('wpstacker_post_format')); ?>>Link</option>
									<option value="quote" <?php selected('quote', get_option('wpstacker_post_format')); ?>>Quote</option>
									<option value="status" <?php selected('status', get_option('wpstacker_post_format')); ?>>Status</option>
									<option value="video" <?php selected('video', get_option('wpstacker_post_format')); ?>>Video</option>
								</select>
								<p class="description">Which post format should the post with the links have?</p>
							</td>
						</tr>
						<tr>
							<th>Post category</th>
							<td>
								<?php
								wp_dropdown_categories(array(
									'name' => 'wpstacker_post_category',
									'hide_empty' => 0,
									'selected' => get_option('wpstacker_post_category')
								));
								?>
								<p class="description">Which category should the post be saved in?</p>
							</td>
						</tr>
						<tr>
							<th>Commect status</th>
							<td>
								<select name="wpstacker_comment_status">
									<option value="open" <?php selected('open', get_option('wpstacker_comment_status')); ?>>Open</option>
									<option value="close" <?php selected('close', get_option('wpstacker_comment_status')); ?>>Close</option>
								</select>
								<p class="description">Should the generated posts be commentable?</p>
							</td>
						</tr>
						<tr>
							<th>Ping status</th>
							<td>
								<select name="wpstacker_ping_status">
									<option value="open" <?php selected('open', get_option('wpstacker_ping_status')); ?>>Open</option>
									<option value="close" <?php selected('close', get_option('wpstacker_ping_status')); ?>>Close</option>
								</select>
								<p class="description">Should the generated posts be pingable?</p>
							</td>
						</tr>
					</table>
					
					<h3>Post content matching</h3>
					<table class="form-table">
						<tr>
							<th>Title</th>
							<td>
								<input type="text" size="57" name="wpstacker_title" value="<?php echo get_option('wpstacker_title'); ?>" />
								<p class="description">
									This is the title of each post, which WP Stacker generates.<br />
									<strong>Use <i>%%day%%</i> for the day, on which the post is being generated; <i>%%month%%</i> for the month;
									<i>%%year%%</i> for the year; <i>%%count%%</i> to get the number of posted links. For a custom date formate, 
									please use <i>%%date::FORMAT%%</i> (e.g. <i>%%date::d F Y%%</i> for <?php date('d F Y'); ?>; You have to use 
									<a href="http://php.net/manual/de/function.date.php" target="_blank">PHP date format</a>).</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Entry building</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wpstacker_entry_building',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wpstacker_entry_building'), 'wpstacker_entry_building', $args);
								?>
								<p class="description">
									Configure how a link should be shown. If you wish to show a part of the text only if a variable is not empty, 
									write the text and the variable in double square brackets. For example: %%title%%[[ - Tags: %%tags%%]]<br />
									<strong>Use <i>%%title%%</i> for title of the link in pocket; <i>%%description%%</i> for the meta description of the link; 
									<i>%%url%%</i> for the html link itself; <i>%%url_only%%</i> for the url (not link) itself; <i>%%tags%%</i> for added tags in pocket/metatags; <i>%%author%%</i> for the name 
									of the author who wrote the article; <i>%%countwords%%</i> for the number of words, which the article has.</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Introduction text</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wpstacker_introduction_text',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wpstacker_introduction_text'), 'wpstacker_introduction_text', $args);
								?>
								<p class="description">
									At the beginning of the post, before the links, this text will be shown.<br />
									<strong>Use <i>%%day%%</i> for day, on which the post is being generated; <i>%%month%%</i> for the month; <i>%%year%%</i> for the 
										year; %%count%% to get the number of posted links. For a custom date formate, please use <i>%%date::FORMAT%%</i> (e.g. 
										<i>%%date::d F Y%%</i> for <?php date('d F Y'); ?>; You have to use 
										<a href="http://php.net/manual/de/function.date.php" target="_blank">PHP date format</a>).</strong>
								</p>
							</td>
						</tr>
						<tr>
							<th>Statements text</th>
							<td>
								<?php
								$args = array(
									'textarea_name' => 'wpstacker_statements_text',
									'textarea_rows' => 5
								);
								wp_editor(get_option('wpstacker_statements_text'), 'wpstacker_statements_text', $args);
								?>
								<p class="description">
									At the end of the post, after the links, this text will be shown.<br />
									<strong>Use <i>%%day%%</i> for day, on which the post is being generated; <i>%%month%%</i> for the month; <i>%%year%%</i> for the 
										year; %%count%% to get the number of posted links. For a custom date formate, please use <i>%%date::FORMAT%%</i> (e.g. 
										<i>%%date::d F Y%%</i> for <?php date('d F Y'); ?>; You have to use 
										<a href="http://php.net/manual/de/function.date.php" target="_blank">PHP date format</a>).</strong>
								</p>
							</td>
						</tr>
					</table>
					
					<input type="hidden" name="wpstacker_edit" value="1" />
					
					<p class="submit">
						<input type="submit" class="button-primary" value="<?php _e('Save Changes') ?>" />
					</p>
				</form>
			</div>
			<?php
		}
		
		// Options page controller
		function options_page_controller() {
			// Solve escape errors
			if (isset($_POST['wpstacker_title'] )) { $_POST['wpstacker_title'] = stripslashes_deep($_POST['wpstacker_title']); }
			if (isset($_POST['wpstacker_entry_building'])) { $_POST['wpstacker_entry_building'] = stripslashes_deep($_POST['wpstacker_entry_building']); }
			if (isset($_POST['wpstacker_introduction_text'])) { $_POST['wpstacker_introduction_text'] = stripslashes_deep($_POST['wpstacker_introduction_text']); }
			if (isset($_POST['wpstacker_statements_text'])) { $_POST['wpstacker_statements_text'] = stripslashes_deep($_POST['wpstacker_statements_text']); }
		
			// Check if should start Pocket auth process
			if (isset($_GET['auth-get'])) {
				// Start Pocket auth process
				$this->authPocketAccountGetRequest();
			}
			
			// Check if should save Pocket access token
			if (isset($_GET['auth'])) {
				// Save Pocket access token
				$this->authPocketAccountSaveAccessToken();
			}
			
			// Check if Pocket account auth saved successfull
			if (isset($_GET['auth-success'])) {
				// Print, the auth succeed
				echo '<div id="message" class="updated">';
					echo '<p><strong>You have successfully authenticated your Pocket Account!</strong></p>';
				echo '</div>';
			}
			
			// Check if setting sended
			if (isset($_POST['wpstacker_edit'])
				&& $_POST['wpstacker_edit']
				) {
				// Error Array
				$error = array();
				
				// Error Text Array
				$errorLang = array(
					'1' => 'Please enter your Pocket Consumer-Key or reset it to use the default key (recommend).',
					'2' => 'Please enter a title for the posts.',
					'3' => 'Please enter a building for each link which will be posted.'
				);
			
				// Update "Pocket Login"
				$changeConsumerKey = false;
				if (isset($_POST['wpstacker_pocket_consumer_key_custom_remove'])
					&& $_POST['wpstacker_pocket_consumer_key_custom_remove'] == 1) {
					// Set default key
					update_option('wpstacker_pocket_consumer_key_custom', 0);
					update_option('wpstacker_pocket_consumer_key', $this->xcrypt(0, $this->global_pocket_consumer_key));
					
					// Reset authed Pocket account
					update_option('wpstacker_pocket_access_key', '');
					update_option('wpstacker_pocket_username', '');
					$changeConsumerKey = true;
				}elseif(get_option('wpstacker_pocket_consumer_key_custom') == 1 && $_POST['wpstacker_pocket_consumer_key'] == '') {
					$error[] = 1;
				}elseif(get_option('wpstacker_pocket_consumer_key_custom') == 1 && $_POST['wpstacker_pocket_consumer_key'] != '') {
					if ($this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')) != $_POST['wpstacker_pocket_consumer_key']) {
						// Set new key
						update_option('wpstacker_pocket_consumer_key', $this->xcrypt(0, $_POST['wpstacker_pocket_consumer_key']));
						
						// Reset authed Pocket account
						update_option('wpstacker_pocket_access_key', '');
						update_option('wpstacker_pocket_username', '');
						$changeConsumerKey = true;
					}
				}elseif (get_option('wpstacker_pocket_consumer_key_custom') == 0 && $_POST['wpstacker_pocket_consumer_key'] != '') {
					// Set custom Consumer-Key first time
					update_option('wpstacker_pocket_consumer_key_custom', 1);
					update_option('wpstacker_pocket_consumer_key', $this->xcrypt(0, $_POST['wpstacker_pocket_consumer_key']));
					
					// Reset authed Pocket account
					update_option('wpstacker_pocket_access_key', '');
					update_option('wpstacker_pocket_username', '');
					$changeConsumerKey = true;
				}
				
				// Updates "Data processing"
				if ($_POST['wpstacker_links_to_use'] < 0 && $_POST['wpstacker_links_to_use'] > 5) {
					$_POST['wpstacker_links_to_use'] = 0;
				}
				
				update_option('wpstacker_links_to_use', $_POST['wpstacker_links_to_use']);
				update_option('wpstacker_faved', $_POST['wpstacker_faved']);
				update_option('wpstacker_order', $_POST['wpstacker_order']);
				update_option('wpstacker_mark_as_readed', $_POST['wpstacker_mark_as_readed']);
				update_option('wpstacker_clean_url', $_POST['wpstacker_clean_url']);
				update_option('wpstacker_meta_keyword_as_tags', $_POST['wpstacker_meta_keyword_as_tags']);
				update_option('wpstacker_reference_wpstacker', $_POST['wpstacker_reference_wpstacker']);
				
				// Updates "Post settings"
				
				// Check if post status is valid, else check default
				if (
					$_POST['wpstacker_post_status'] != 'publish' &&
					$_POST['wpstacker_post_status'] != 'pending' &&
					$_POST['wpstacker_post_status'] != 'draft'
				) {
					$_POST['wpstacker_post_status'] = 'draft';
				}
				
				// Check if post category is valid, else check default
				if (
					$_POST['wpstacker_post_category'] == '' ||
					$_POST['wpstacker_post_category'] == 0
				) {
					$_POST['wpstacker_post_category'] = 1;
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wpstacker_comment_status'] != 'open' &&
					$_POST['wpstacker_comment_status'] != 'close'
				) {
					$_POST['wpstacker_comment_status'] = 'open';
				}
				
				// Check if comment status is valid, else check default
				if (
					$_POST['wpstacker_ping_status'] != 'open' &&
					$_POST['wpstacker_ping_status'] != 'close'
				) {
					$_POST['wpstacker_ping_status'] = 'open';
				}
				
				update_option('wpstacker_post_status', $_POST['wpstacker_post_status']);
				update_option('wpstacker_post_format', $_POST['wpstacker_post_format']);
				update_option('wpstacker_post_category', $_POST['wpstacker_post_category']);
				update_option('wpstacker_comment_status', $_POST['wpstacker_comment_status']);
				update_option('wpstacker_ping_status', $_POST['wpstacker_ping_status']);
				
				// Update "Post content matching"
				
				// Check if title is not set
				if ($_POST['wpstacker_title'] == '') {
					$error[] = 2;
				}else {
					update_option('wpstacker_title', $_POST['wpstacker_title']);
				}
				
				// Chech if entry building is not set
				if ($_POST['wpstacker_entry_building'] == '') {
					$error[] = 3;
				}else {
					update_option('wpstacker_entry_building', $_POST['wpstacker_entry_building']);
				}
				
				// Updates without checks
				update_option('wpstacker_introduction_text', $_POST['wpstacker_introduction_text']);
				update_option('wpstacker_statements_text', $_POST['wpstacker_statements_text']);
				
				// WP Stacker settings
				update_option('wpstacker_language', $_POST['wpstacker_language']);
				update_option('wpstacker_statistics', $_POST['wpstacker_statistics']);
				
				// Output all errors
				$i = 0;
				while ($i < count($error)) {
					?>
					<div id="message" class="error">
						<p><strong><?php echo $errorLang[$error[$i]]; ?></strong></p>
					</div>
					<?php
					$i++;
				}
				
				// Check if save without misstakes
				if (count($error) == 0) {
					?>
					<div id="message" class="updated">
						<p><strong><?php _e('Settings saved.') ?></strong></p>
					</div>
					<?php
				}
				
				// Check if Consumer-Key was changed. If yes, azth was reseted.
				if ($changeConsumerKey) {
					?>
					<div id="message" class="updated">
						<p><strong>You changed the Consumer-Key. Because of, the authentication of your WP Stacker account was removed. Please reauthenticate!</strong></p>
					</div>
					<?php
				}
			}
			
			// Check Access
			$this->checkPocketAccess();
		}
		
		// Function to set the main page
		function main_link() {
			global $wp_version;

			if (version_compare($wp_version, '3.7', '<')) {
				$iconPng = 'images/icons/16_upto_wp37.png';
			}else {
				$iconPng = 'images/icons/16.png';
			}
			// Start the view of the main page
			add_menu_page('WP Stacker', 'WP Stacker', 'edit_pages', 'pocket_poster', array($this, 'main_page_view'), plugin_dir_url(__FILE__) . $iconPng, 32);
		}
		
		// Main page view
		function main_page_view() {
			// Add option page style
			wp_enqueue_style('wpstacker_main', plugins_url('css/main.css', __FILE__));
			wp_enqueue_style('wpstacker_support', plugins_url('css/support.css', __FILE__));

			// Add JavaScript functions
			wp_enqueue_script('droppable');
			wp_enqueue_script('nav-menu');
			wp_enqueue_script('wpstacker_main');
			?>
			<div class="wrap wpstacker">
				<div id="icon-wpstacker" class="icon32"><br></div>
				<h2>WP Stacker</h2>
				
				<?php // Bullshit Snippet for fix navi-menu JavaScript ?>
				<div class="nav-tabs-nav">
					<div class="nav-tabs-arrow nav-tabs-arrow-left" style="display: none; "><a>«</a></div>
					<div class="nav-tabs-wrapper">
						<div class="nav-tabs">
							<span class="nav-tab nav-tab-active"></span><a href="#" class="nav-tab menu-add-new"></a>	
						</div>
					</div>
				</div>
				
				<?php
				// Check if only elements with a tag shoul loaded (pre-check)
				if (isset($_POST['mode'])) {
					if ($_POST['mode'] == 'get' && isset($_POST['onlyWithTag']) && $_POST['onlyWithTag']) { // Get Elements
						// Check if tag is not empty
						if (isset($_POST['tag'])) {
							if ($_POST['tag'] == '') {
								// Redict to main start page with error
								unset($_POST['mode']);
							}
						}
					}
				}
				?>
				
				<?php
				if (isset($_POST['mode'])) {
					if ($_POST['mode'] != 'get') {
						$this->support_div();
					}
				}
				?>
				
				<?php $this->main_page_controller(); ?>
				
				<?php
				// Check if should get Pocket elements or save as post
				if (
					isset($_POST['mode'])
					&& $_POST['mode'] != ''
					) {
					if ($_POST['mode'] == 'get') { // Get Elements
						// Check Pocket Access
						$checkPocketAccess = $this->checkPocketAccess();
						
						// Check if access is valid
						if ($checkPocketAccess) {				
							// Get links from the user
							$getLinksPost = array();
							
							$getLinksPost['consumer_key'] = $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key'));
							$getLinksPost['access_token'] = $this->xcrypt(1, get_option('wpstacker_pocket_access_key'));
							$getLinksPost['detailType'] = 'complete';
							
							// Should get Readed, unreaded or all links?
							if (get_option('wpstacker_links_to_use') == 0 || get_option('wpstacker_links_to_use') == 3) { // Unreaded
								$getLinksPost['state'] = 'unread';
							}elseif (get_option('wpstacker_links_to_use') == 1 || get_option('wpstacker_links_to_use') == 4) { // Readed / Archived
								$getLinksPost['state'] = 'archive';
							}else { // All
								$getLinksPost['state'] = 'all';
							}
							
							// Check if only faved or unfaved links should use
							if (get_option('wpstacker_faved') == 1) { // only faved
								$getLinksPost['favorite'] = '1';
							}else if (get_option('wpstacker_faved') == 2) { // only unfaved
								$getLinksPost['favorite'] = '0';
							} // All
							
							// Check if order should be oldest to newest or newest to oldest
							if (get_option('wpstacker_order')) { // oldest to newest
								$getLinksPost['sort'] = 'oldest';
							}else { // newest to oldest
								$getLinksPost['sort'] = 'newest';
							}
							
							// Check if only links with a tag should load
							if (isset($_POST['onlyWithTag']) && $_POST['onlyWithTag']) {
								$getLinksPost['tag'] = stripslashes_deep($_POST['tag']);
							}
							
							$getLinks = $this->cURL(
								'https://getpocket.com/v3/get',
								$getLinksPost
							);
							
							// Decode JSON to Object
							$getLinks = json_decode($getLinks);
							
							// Check if only not posted links should post
							if (get_option('wpstacker_links_to_use') == 0 || get_option('wpstacker_links_to_use') == 1 || get_option('wpstacker_links_to_use') == 2) {
								// Remove all already posted links
								foreach ($getLinks->list as $key => $value) {
									// Check if aleady posted. If true, remove it
									$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wpstacker_posted_links` WHERE `url`="' . $value->given_url . '"';
									$row = $this->wpdb->get_results($sql);
									
									if (isset($row[0]->id) && $row[0]->id != '') {
										unset($getLinks->list->$key);
									}
								}
							}
							
							if (count((array)$getLinks->list) == 0) { // No elements
								?>
								<?php $this->support_div(); ?>
								
								<p><strong>You do not have usable elements<?php
								if (isset($_POST['onlyWithTag']) && $_POST['onlyWithTag'] && $_POST['tag'] != '') {
									echo ' with the tag <i>' . stripslashes_deep($_POST['tag']) . '</i>';
								}
								?> in your Pocket account! Is the <i>Links to use</i> setting correct?</strong></p>
								<p>You have to look for interesting links, before you can post them ;-)</p>
								<?php
							}else {
								?>
								<?php $this->support_div(false); ?>
								
								<p class="wpstacker_loader" style="width: 308px; margin: 15px 0 0 0; text-align: center;">
									<img src="<?php echo plugins_url('images/loading.gif', __FILE__) ?>" alt="loading" /><br />
									<strong>Please wait while loading...</strong>
								</p>
								
								<form id="update-nav-menu" action="" method="post" enctype="multipart/form-data" style="display: none;">
									<p><br /><strong>Please edit, sort and associate the links. If you finished, please click on the <i>Generate post</i> button at the end of the list!</strong></p>
									<?php echo '<p>Number of links: <span class="number-links">' . count((array)$getLinks->list) . '</span></p>'; ?>
									
									<ul class="menu ui-sortable" id="menu-to-edit">
										<?php
										// Gennerate output of each link
										foreach ($getLinks->list as $key => $value) {
											// Rewirte Tags Array as Tags string
											if (isset($value->tags) && count($value->tags) != 0) {
												$tagsAsString = '';
												$i2 = 0;
												foreach ($value->tags as $tag) {
													if ($i2 != 0) {
														$tagsAsString .= ', ';
													}
													
													$tagsAsString .= $tag->tag;
													
													$i2++;
												}
												
												$value->tags = $tagsAsString;
												unset($tagsAsString);
											}else { // Not tags yet
												$value->tags = '';
											}
											
											// Get data from the meta tags, if necessary
											if ($value->resolved_title == '' || $value->excerpt == '' || (get_option('wpstacker_meta_keyword_as_tags') == 1 && $value->tags == '')) {
												$urlHtml = $this->cURL($value->given_url, array());
												
												$doc = new DOMDocument();
												@$doc->loadHTML($urlHtml);
												
												if ($value->resolved_title == '') {
													$nodes = $doc->getElementsByTagName('title');
													$value->title = utf8_decode($nodes->item(0)->nodeValue);
													
													if (!$this->is_utf8($value->title)) {
														$value->title = utf8_encode($value->title);
													}
												}
												
												$metas = $doc->getElementsByTagName('meta');
												
												for ($i = 0; $i < $metas->length; $i++) {
													$meta = $metas->item($i);
													
													if ($value->excerpt == '') {
														if($meta->getAttribute('name') == 'description') {
															$value->excerpt = utf8_decode($meta->getAttribute('content'));
															if (!$this->is_utf8($value->excerpt)) {
																$value->excerpt = utf8_encode($value->excerpt);
															}
														}
													}
													
													if (get_option('wpstacker_meta_keyword_as_tags') == 1 && $value->tags == '') {
														if ($meta->getAttribute('name') == 'keywords') {
															$value->tags = utf8_decode($meta->getAttribute('content'));
															if (!$this->is_utf8($value->tags)) {
																$value->tags = utf8_encode($value->tags);
															}
														}
													}
												}
											}
											?>
											<li class="menu-item-edit-inactive">
												<dl class="menu-item-bar">
													<dt class="menu-item-handle">
														<div class="left">
															<?php echo $value->resolved_title; ?>
														</div>
														<div class="right">
															<a class="item-remove" href="#item-remove-<?php echo $key; ?>">Remove element</a>
															<a class="item-edit" href="#item-<?php echo $key; ?>">Edit element</a>
														</div>
													</dt>
												</dl>

												<div class="menu-item-settings" id="item-<?php echo $key; ?>">
													<p class="description description-thin description-two-thirds">
														<label for="item-<?php echo $key; ?>-input-title">
															Title<br />
															<input type="text" id="item-<?php echo $key; ?>-input-title" class="widefat input-title" name="element[][title]" value="<?php echo $value->resolved_title; ?>" />
														</label>
													</p>
													<p class="description description-thin description-one-thirds">
														<label for="item-<?php echo $key; ?>-input-author">
															Author<br />
															<input type="text" id="item-<?php echo $key; ?>-input-author" class="widefat" name="element[][author]" value="<?php
																if (isset($value->authors) && count($value->authors) != 0) {
																	$i2 = 0;
																	foreach($value->authors as $author) {
																		if ($i2 != 0) {
																			echo ', ';
																		}
																		
																		echo $author->name;
																		
																		$i2++;
																	}
																}
															?>" />
														</label>
													</p>
													<p class="description description-thin description-two-thirds">
														<label for="item-<?php echo $key; ?>-input-url">
															URL<br />
															<input type="text" id="item-<?php echo $key; ?>-input-url" class="widefat" name="element[][url]" value="<?php if (get_option('wpstacker_clean_url') == 1) { echo $this->cleanUpURL($value->resolved_url); }else { echo $value->given_url; } ?>" />
															<input type="hidden" id="item-<?php echo $key; ?>-input-url" class="widefat" name="element[][url_uncleaned]" value="<?php echo $value->given_url; ?>" />
														</label>
													</p>
													<p class="description description-thin description-one-thirds">
														<label for="item-<?php echo $key; ?>-input-tags">
															Tags<br />
															<input type="text" id="item-<?php echo $key; ?>-input-tags" class="widefat" name="element[][tags]" value="<?php echo $value->tags; ?>" />
														</label>
													</p>
													<p class="description">
														<label for="item-<?php echo $key; ?>-input-description">
															Description (optional)<br />
															<textarea name="element[][description]" rows="4" id="item-<?php echo $key; ?>-input-description" class="widefat" type="textarea"><?php if (isset($value->excerpt)) { echo $value->excerpt; } ?></textarea>
														</label>
													</p>
													
													
													<input type="hidden" name="element[][id]" value="<?php echo $value->item_id; ?>" />
													<input type="hidden" name="element[][countwords]" value="<?php echo $value->word_count; ?>" />
													<input type="hidden" name="element[][associate]" class="associate" value="0" />
												</div>
											</li>
										<?php } ?>
									</ul>
									
									<p class="submit">
										<input type="hidden" name="mode" value="save" />
										<input type="submit" name="save_menu" class="button-primary" value="Gennerate post" />
										<strong>This can take up to 30 seconds!</strong>
									</p>
								</form>
								<?php
							}
						}
					}elseif ($_POST['mode'] == 'save') { // Save post
						// Check if elements was lposted
						if ($_POST['count_elements'] == 0) { // No elements
							?>
							<p><strong>No elements to post were found. Is the <i>Links to use</i> setting correct?</strong></strong></p>
							<p>You have to look for interesting links, before you can post them ;-)</p>
							<?php
						}else { // Success
							?>
							<p class="short"><strong>Great! You posted <?php echo $_POST['count_elements']; ?> links from your Pocket account into your blog. <?php if (isset($_POST['wpstacker_mark_as_readed']) && $_POST['wpstacker_mark_as_readed']) { ?>They are now marked as read in your pocket account!<?php } ?></strong></p>
							<p class="short">If you like WP Stacker, I would be pleased, if you supported me. How to? Look in the yellow box on the right!</p>
							<?php
						}
					}
				}else { // Print introduction
					// Check if form already sent, tag requied and not set
					if (
						isset($_POST['onlyWithTag'])
						&& $_POST['onlyWithTag']
						) {
						?>
						<div id="message" class="error">
							<p><strong>Please write a tag in the input field or get links not only with a tag.</strong></p>
						</div>
						<?php
						$onlyWithTagToggle = true;
					}
					?>
					<br /><br />
					<p class="short">You would like to generate a new post with links from you pocket account? Great!</p>

					<p class="short">After you click on <i>Get links</i> you will see all links which will be posted. If you would like to 
					associate to links, take the link which should be shown without title, description and tags in the second level and the main link.<br />
					You will be able to edit all titles, descriptions, links and tags or remove them. If you finished, you can generate the post.<?php if (get_option('wpstacker_mark_as_readed') == 1) { ?> Only if you click on <i>Generate post</i>, the links will be marked as read in your Pocket account.<?php } ?></p>
					
					<?php
					// Check Pocket Access
					$checkPocketAccess = $this->checkPocketAccess();
					?>
					
					<form method="post" action="<?php echo $_SERVER['REQUEST_URI']; ?>">
					
						<table class="form-table">
							<tr>
								<th>
									<input type="checkbox" name="onlyWithTag" value="1"<?php if ($onlyWithTagToggle) { echo ' checked'; } ?> /> Get only links with a tags
								</th>
								<td>&nbsp;</td>
							</tr>
							<tr class="onlyWithTag"<?php if ($onlyWithTagToggle) { echo ' style="display: block;"'; } ?>>
								<th>Tag (only one)</th>
								<td>
									<input type="text" name="tag" />
								</td>
							</tr>
						</table>
					
						<p class="submit">
							<input type="hidden" name="mode" value="get" />
							<input type="submit" class="button-primary" value="Get links"<?php if($checkPocketAccess == false) { echo ' disabled'; } ?> />
							<strong>This can take up to 60 seconds!</strong>
						</p>
					</form>
					<?php
				}
				?>
			</div>
			<?php
		}
		
		// Options page controller
		function main_page_controller() {
			global $current_user;
			
			// Check if the post sould save
			if (isset($_POST['mode'])) {
				if ($_POST['mode'] == 'save') { // Save post
					########################
					## SET ENTRY BUILDING ##
					########################
					
					// Set en empty example for entry building with replace
					$replaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false, false, false, false);
					
					// Set en empty example for entry building without replace
					$noReplaceEntryBuilding = $this->replaceEntryBuilding(false, false, false, false, false, false, false, false);
					
					// Check, which Array elements are dynamic. Set empy replace and flag in new array
					$i = 0;
					$exampleReplaceEntryBuilding = array();
					while($i < count($replaceEntryBuilding)) { 
						if ($replaceEntryBuilding[$i] == $noReplaceEntryBuilding[$i]) {
							$exampleReplaceEntryBuilding[$i] = array(
								'example' => $replaceEntryBuilding[$i],
								'dynamic' => false
							);
						}else {
							$exampleReplaceEntryBuilding[$i] = array(
								'example' => $replaceEntryBuilding[$i],
								'dynamic' => true
							);
						}
						
						$i++;
					}
					
					// Unset not longer needed vars
					unset($replaceEntryBuilding);
					unset($noReplaceEntryBuilding);
					
					#####################################
					## COMBINE URL, URL CLEANED AND ID ##
					#####################################
					
					$i = 0;
					while ($i < (count($_POST['element']) / 9)) {
						$url = $_POST['element'][(($i * 9) + 2)]['url'];
						$urlUncleaned = $_POST['element'][(($i * 9) + 3)]['url_uncleaned'];
						$id = $_POST['element'][(($i * 9) + 6)]['id'];
						
						$_POST['element'][(($i * 9) + 2)] = array(
							array(
								$url,
								$urlUncleaned,
								$id
							)
						);
						
						
						$i++;
					}
					
					#########################
					## SET ASSOCIATE LINKS ##
					#########################
					$i = 0;
					while ($i < (count($_POST['element']) / 9)) {
						// Check if this it not a associate link
						if (isset($_POST['element'][($i * 9) + 8]['associate']) && !$_POST['element'][($i * 9) + 8]['associate']) {
							// Search for associate links in the following
							$associateLinks = array();
							$i2 = 1;
							while(true) {

								// If this is an associate links, add this to the array, else break the while-loop
								if ($_POST['element'][($i * 9) + 8 + ($i2 * 9)]['associate']) {
									$_POST['element'][($i * 9) + 2][] = $_POST['element'][(($i * 9) + 2 + ($i2 * 9))][0];
								}else {
									break;
								}
								
								$i2++;
							}
						}
						
						$i++;
					}
					
					####################
					## GENNERATE POST ##
					####################
					
					// Set posted elements in $_POST for view
					$_POST['count_elements'] = round((count($_POST['element']) / 9));
					
					// Array for all posted links
					$allPostedLinks = array();
					
					$post_content = '';
					
					// Gennerate all links in text
					$i = 0;
					while ($i < (count($_POST['element']) / 9)) {
						// Check if only not posted links should post
						if (get_option('wpstacker_links_to_use') == 0 || get_option('wpstacker_links_to_use') == 1 || get_option('wpstacker_links_to_use') == 2) {
							// Check if aleady posted. If true, confine to the next loop
							if (isset($_POST['element'][($i * 9) + 2]['url'])) {
								$url = $_POST['element'][($i * 9) + 2]['url'];
							}else {
								$url = '';
							}

							$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wpstacker_posted_links` WHERE `url`="' . $url . '"';
							$row = $this->wpdb->get_results($sql);
							
							if (isset($row[0]->id) && $row[0]->id != '') {
								$_POST['count_elements'] -= count($_POST['element'][($i * 9) + 2]); // - this and associated elements
								$i++;
								continue;
							}
						}
						
						// Check if this it not a associate link
						if (!$_POST['element'][($i * 9) + 8]['associate']) {
							// Gennerate url array in url string
							$url = '';
							$urlOnly = '';

							$i2 = 0;
							foreach ($_POST['element'][($i * 9) + 2] as $value) {
								if ($i2 != 0) {
									$url .= '; ';
									$urlOnly .= ', ';
								}
								
								$url .= '<a href="' . $value[0] . '" target="_blank">' . $value[0] . '</a>';
								$urlOnly .= $value[0];
								
								// Fill array for all posted links
								$allPostedLinks[] = $value;
								
								$i2++;
							}
							
							// Set element in entry building
							$element = $this->replaceEntryBuilding(
								$_POST['element'][($i * 9)]['title'],
								$_POST['element'][($i * 9) + 5]['description'],
								$url,
								$urlOnly,
								$_POST['element'][($i * 9) + 4]['tags'],
								$_POST['element'][($i * 9) + 1]['author'],
								$_POST['element'][($i * 9) + 7]['countwords']
							);
							
							// Check if a dynamic element is not in use an delete it
							$i2 = 0;
							while ($i2 < count($element)) {
								if ($element[$i2] == $exampleReplaceEntryBuilding[$i2]['example'] && $exampleReplaceEntryBuilding[$i2]['dynamic']) {
									unset($element[$i2]);
								}

								$i2++;
							}
							
							// Set element array as string for the post content
							$post_content .= '<p>';
							
							foreach ($element as $value) {
								$post_content .= $value;
							}
							
							$post_content .= '</p>';
						}
						
						$i++;
					}
					
					$post_content_final = '';
					
					// Set introduction text if not empty
					if (trim(get_option('wpstacker_introduction_text')) != '') {
						$post_content_final .= $this->getReplacedIntroductionText($_POST['count_elements']);
					}
					
					// Set links content
					$post_content_final .= $post_content;
					
					// Set statements text if not empty
					if (trim(get_option('wpstacker_statements_text')) != '') {
						$post_content_final .= $this->getReplacedStatementsText($_POST['count_elements']);
					}
					
					// Chech if reference to WP Stacker shot print
					if (get_option('wpstacker_reference_wpstacker')) {
						$post_content_final .= '<p><i>This post was automatically created by WP Stacker. If you look for this WordPress plugin, check out <a href="http://wp-stacker.com/" target="_blank">WP-Stacker.com</a> now!</i></p>';
					}
					
					###############
					## SAVE POST ##
					###############
					
					// Save only, if one or more elements are valid
					if ($_POST['count_elements'] != 0) {
						// Set settings array
						$post = array(
							'comment_status' => get_option('wpstacker_comment_status'),
							'ping_status' => get_option('wpstacker_ping_status'),
							'post_author' => $current_user->ID,
							'post_category' => array(get_option('wpstacker_post_category')),
							'post_content' => $post_content_final,
							'post_date' => date('Y-m-d H:i:s'),
							'post_date_gmt' => gmdate('Y-m-d H:i:s'),
							'post_status' => get_option('wpstacker_post_status'),
							'post_title' => $this->getReplacedTitle($_POST['count_elements']),
							'post_type' => 'post'
						);
						
						// Insert the post
						$postId = wp_insert_post($post);
						
						// Set post format
						set_post_format($postId, get_option('wpstacker_post_format'));
					}
					
					##########################
					## SAVE LINKS AS POSTED ##
					##########################
					
					// Save only, if one or more elements are valid
					if ($_POST['count_elements'] != 0) {
						// Set currently time
						$time = time();
						
						$i = 0;
						while ($i < count($allPostedLinks)) {
							$sql = 'SELECT `id` FROM `' . $this->wpdb->prefix . 'wpstacker_posted_links` WHERE `url`="' . $allPostedLinks[$i][1] . '"';
							$row = $this->wpdb->get_results($sql);
							
							// Save only it already not saved
							if ($row[0]->id == '') {
								$sql = '
								INSERT IGNORE INTO `' . $this->wpdb->prefix . 'wpstacker_posted_links` (
									`url`,
									`timestamp`
								)
								VALUES
									(%s, %s)
								';
								
								// Save link as posted
								$this->wpdb->query(
									$this->wpdb->prepare(
										$sql,
										$allPostedLinks[$i][1],
										$time
									)
								);
							}
							
							$i++;
						}
					}
					
					#################################
					## SET STATUS READED IN POCKET ##
					#################################
					
					// Check if link should marke as readed
					if (get_option('wpstacker_mark_as_readed')) {
						$markAsReaded = array();
						
						// Fill JSON as Array
						$i = 0;
						while ($i < count($allPostedLinks)) {
							$markAsReaded[] = array(
								'action' => 'archive',
								'item_id' => $allPostedLinks[$i][2]
							);
							
							$i++;
							
							// Chech if limit of links reached. If yes, send request and start new sends array
							if (($i / 100) == round($i / 100)) {
								// Send request
								$this->cURL(
									'https://getpocket.com/v3/send',
									array(
										'consumer_key' => $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')),
										'access_token' => $this->xcrypt(1, get_option('wpstacker_pocket_access_key')),
										'actions' => json_encode($markAsReaded)
									)
								);
								
								// Clean up array
								$markAsReaded = array();
							}
						}
						
						// Send request
						$this->cURL(
							'https://getpocket.com/v3/send',
							array(
								'consumer_key' => $this->xcrypt(1, get_option('wpstacker_pocket_consumer_key')),
								'access_token' => $this->xcrypt(1, get_option('wpstacker_pocket_access_key')),
								'actions' => json_encode($markAsReaded)
							)
						);
					}
					
					// Send statistics, if allowed
					if (get_option('wpstacker_statistics') == 1) {
						$allLinksForStatisics = array();
						$i = 0;
						while ($i < count($allPostedLinks)) {
							$allLinksForStatisics[] = $allPostedLinks[$i][0];
							
							$i++;
						}
						
						$this->statisticsPublishPost($allLinksForStatisics);
					}
				}
			}
		}
		
		// Statisics send to WP-Stacker.com: Update version
		private function statisticsUpdateVersion() {
			// Get Data
			$url = explode('?', ((empty($_SERVER['HTTPS'])) ? 'http' : 'https') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
			$url = $url[0];
			$type = 'update';
			$versions = array('from' => get_option('wpstacker_version'), 'to' => $this->version);
			
			// Gennerate JSON Array
			$data = array(
				'url' => $url,
				'type' => $type,
				'update' => $versions
			);
			
			@$this->cURL(
				'http://pluginstats.wp-stacker.com/index.php',
				array(
					'data' => json_encode($data)
				)
			);
		}
		
		// Statisics send to WP-Stacker.com: Publish post
		private function statisticsPublishPost($links) {
			// Get Data
			$url = explode('?', ((empty($_SERVER['HTTPS'])) ? 'http' : 'https') . '://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);
			$url = $url[0];
			$type = 'publish';
			
			// Gennerate JSON Array
			$data = array(
				'url' => $url,
				'type' => $type,
				'links' => $links
			);
			
			echo $this->cURL(
				'http://pluginstats.wp-stacker.com/index.php',
				array(
					'data' => json_encode($data)
				)
			);
		}
	}
}

// Init the plugin in wordpress
if(class_exists('wpstacker')) {
	$wpstacker = new wpstacker();
}

if(isset($wpstacker)) {
	add_action('init', array(&$wpstacker, 'activate'));
}
?>